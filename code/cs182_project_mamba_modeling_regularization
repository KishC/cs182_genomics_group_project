{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import f1_score, accuracy_score, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>coord</th>\n",
       "      <th>kind</th>\n",
       "      <th>transcript</th>\n",
       "      <th>strand</th>\n",
       "      <th>chrom</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "      <th>sequence</th>\n",
       "      <th>win_start</th>\n",
       "      <th>win_end</th>\n",
       "      <th>is_truncated</th>\n",
       "      <th>motif_len</th>\n",
       "      <th>motif</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NC_050096.1_35318_donor</td>\n",
       "      <td>35318</td>\n",
       "      <td>0</td>\n",
       "      <td>XM_020544715.3</td>\n",
       "      <td>+</td>\n",
       "      <td>NC_050096.1</td>\n",
       "      <td>35319</td>\n",
       "      <td>35320</td>\n",
       "      <td>GGGCCCGGCTGGGCCTCAGCGGGGTCGTCGAGATGGAGATGGGGAG...</td>\n",
       "      <td>35118</td>\n",
       "      <td>35520</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>GT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NC_050096.1_34607_acceptor</td>\n",
       "      <td>34607</td>\n",
       "      <td>1</td>\n",
       "      <td>XM_020544715.3</td>\n",
       "      <td>+</td>\n",
       "      <td>NC_050096.1</td>\n",
       "      <td>34605</td>\n",
       "      <td>34606</td>\n",
       "      <td>TCCGGTGATTAATTTGTCCTTATACCTTTACAACAAAAATTCACTA...</td>\n",
       "      <td>34404</td>\n",
       "      <td>34806</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>TG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NC_050096.1_36174_donor</td>\n",
       "      <td>36174</td>\n",
       "      <td>0</td>\n",
       "      <td>XM_020544715.3</td>\n",
       "      <td>+</td>\n",
       "      <td>NC_050096.1</td>\n",
       "      <td>36175</td>\n",
       "      <td>36176</td>\n",
       "      <td>ATAATATGTTCATTATATCACAACACTCTTTTCTTATGGAGTCGTG...</td>\n",
       "      <td>35974</td>\n",
       "      <td>36376</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>GT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NC_050096.1_36037_acceptor</td>\n",
       "      <td>36037</td>\n",
       "      <td>1</td>\n",
       "      <td>XM_020544715.3</td>\n",
       "      <td>+</td>\n",
       "      <td>NC_050096.1</td>\n",
       "      <td>36035</td>\n",
       "      <td>36036</td>\n",
       "      <td>GCACAAAACTAACTAAAGGAATCATTCTGATAGATAACACTATAAA...</td>\n",
       "      <td>35834</td>\n",
       "      <td>36236</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>AG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NC_050096.1_36504_donor</td>\n",
       "      <td>36504</td>\n",
       "      <td>0</td>\n",
       "      <td>XM_020544715.3</td>\n",
       "      <td>+</td>\n",
       "      <td>NC_050096.1</td>\n",
       "      <td>36505</td>\n",
       "      <td>36506</td>\n",
       "      <td>TGTCATTTCCTTACCTCATTGAATCATTTCCGATGCTTCTTCTCTG...</td>\n",
       "      <td>36304</td>\n",
       "      <td>36706</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>GT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           id  coord  kind      transcript strand  \\\n",
       "0     NC_050096.1_35318_donor  35318     0  XM_020544715.3      +   \n",
       "1  NC_050096.1_34607_acceptor  34607     1  XM_020544715.3      +   \n",
       "2     NC_050096.1_36174_donor  36174     0  XM_020544715.3      +   \n",
       "3  NC_050096.1_36037_acceptor  36037     1  XM_020544715.3      +   \n",
       "4     NC_050096.1_36504_donor  36504     0  XM_020544715.3      +   \n",
       "\n",
       "         chrom  start    end  \\\n",
       "0  NC_050096.1  35319  35320   \n",
       "1  NC_050096.1  34605  34606   \n",
       "2  NC_050096.1  36175  36176   \n",
       "3  NC_050096.1  36035  36036   \n",
       "4  NC_050096.1  36505  36506   \n",
       "\n",
       "                                            sequence  win_start  win_end  \\\n",
       "0  GGGCCCGGCTGGGCCTCAGCGGGGTCGTCGAGATGGAGATGGGGAG...      35118    35520   \n",
       "1  TCCGGTGATTAATTTGTCCTTATACCTTTACAACAAAAATTCACTA...      34404    34806   \n",
       "2  ATAATATGTTCATTATATCACAACACTCTTTTCTTATGGAGTCGTG...      35974    36376   \n",
       "3  GCACAAAACTAACTAAAGGAATCATTCTGATAGATAACACTATAAA...      35834    36236   \n",
       "4  TGTCATTTCCTTACCTCATTGAATCATTTCCGATGCTTCTTCTCTG...      36304    36706   \n",
       "\n",
       "   is_truncated  motif_len motif  \n",
       "0         False          2    GT  \n",
       "1         False          2    TG  \n",
       "2         False          2    GT  \n",
       "3         False          2    AG  \n",
       "4         False          2    GT  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "splice_df = pd.read_csv('splice_sites_full_centered_balanced_correct_V3.csv')\n",
    "splice_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data with stratification\n",
    "train_df, temp_df = train_test_split(splice_df, test_size=0.3, stratify=splice_df['kind'], random_state=42)\n",
    "val_df, test_df = train_test_split(temp_df, test_size=0.5, stratify=temp_df['kind'], random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Full Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PyTorch version: 2.4.0+cu121\n",
      "CUDA available: True\n",
      "CUDA version: 12.1\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "print(f\"PyTorch version: {torch.__version__}\")\n",
    "print(f\"CUDA available: {torch.cuda.is_available()}\")\n",
    "print(f\"CUDA version: {torch.version.cuda}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cell 1: Imports and Setup\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from transformers import AutoTokenizer, AutoModel, AutoConfig\n",
    "from mamba_ssm import Mamba\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from tqdm.auto import tqdm\n",
    "import pandas as pd\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cell 2: Dataset Class (Modified)\n",
    "class DNASequenceAndEmbeddingDataset(Dataset):\n",
    "    def __init__(self, sequences, labels, tokenizer, bert_model, device, max_length=512):\n",
    "        self.sequences = sequences\n",
    "        self.labels = labels\n",
    "        self.tokenizer = tokenizer\n",
    "        self.bert_model = bert_model\n",
    "        self.device = device\n",
    "        self.max_length = max_length\n",
    "        \n",
    "        # Nucleotide to index mapping\n",
    "        self.nuc_to_idx = {\n",
    "            'A': 0, 'C': 1, 'G': 2, 'T': 3, 'N': 4,\n",
    "            'P': 5  # P for padding\n",
    "        }\n",
    "        \n",
    "        class SequenceDataset(Dataset):\n",
    "            def __init__(self, sequences, labels):\n",
    "                self.sequences = sequences\n",
    "                self.labels = labels\n",
    "        \n",
    "            def __len__(self):\n",
    "                return len(self.sequences)\n",
    "        \n",
    "            def __getitem__(self, idx):\n",
    "                return self.sequences[idx], self.labels[idx]\n",
    "        \n",
    "        def collate_fn(batch):\n",
    "            sequences, labels = zip(*batch)\n",
    "            inputs = tokenizer(\n",
    "                list(sequences),\n",
    "                padding=\"max_length\",\n",
    "                max_length=max_length,\n",
    "                truncation=True,\n",
    "                return_tensors=\"pt\"\n",
    "            )\n",
    "            labels = torch.tensor(labels, dtype=torch.long)\n",
    "            return inputs, labels, sequences\n",
    "        \n",
    "        dataset = SequenceDataset(sequences, labels)\n",
    "        loader = DataLoader(dataset, batch_size=64, shuffle=False, collate_fn=collate_fn)\n",
    "        \n",
    "        self.embeddings = []\n",
    "        self.seq_encodings = []\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for seq in tqdm(sequences, desc=\"Computing embeddings\"):\n",
    "                # Tokenize with offsets\n",
    "                inputs = self.tokenizer(\n",
    "                    seq,\n",
    "                    padding=\"max_length\",\n",
    "                    max_length=max_length,\n",
    "                    truncation=True,\n",
    "                    return_offsets_mapping=True,\n",
    "                    return_tensors=\"pt\"\n",
    "                )\n",
    "        \n",
    "                input_ids = inputs['input_ids'].to(device)\n",
    "                attention_mask = inputs['attention_mask'].to(device)\n",
    "                offset_mapping = inputs['offset_mapping'][0]  # shape: (seq_len, 2)\n",
    "        \n",
    "                # Get BERT embeddings\n",
    "                outputs = self.bert_model(input_ids=input_ids, attention_mask=attention_mask)\n",
    "                token_embeddings = outputs[0][0]  # (seq_len, hidden_dim)\n",
    "        \n",
    "                # Initialize nucleotide embeddings (one per base)\n",
    "                seq_len = len(seq)\n",
    "                embedding_dim = token_embeddings.size(-1)\n",
    "                nuc_embeddings = torch.zeros(seq_len, embedding_dim)\n",
    "        \n",
    "                # Map each nucleotide to its token embedding\n",
    "                for token_idx, (start, end) in enumerate(offset_mapping.tolist()):\n",
    "                    if start == end:\n",
    "                        continue  # Special tokens like [CLS], [SEP]\n",
    "                    for i in range(start, end):\n",
    "                        if i < seq_len:\n",
    "                            nuc_embeddings[i] = token_embeddings[token_idx].detach().cpu()\n",
    "        \n",
    "                # Optionally pad to `max_length` for batching\n",
    "                if seq_len < max_length:\n",
    "                    nuc_embeddings = nn.functional.pad(nuc_embeddings, (0, 0, 0, max_length - seq_len))\n",
    "        \n",
    "                self.embeddings.append(nuc_embeddings)\n",
    "        \n",
    "                # Create sequence encoding (still useful if you want to keep raw token ID info too)\n",
    "                seq_encoding = torch.tensor([\n",
    "                    self.nuc_to_idx.get(nuc, self.nuc_to_idx['N']) \n",
    "                    for nuc in (seq[:max_length] + 'P' * max(0, max_length - len(seq)))\n",
    "                ], dtype=torch.long)\n",
    "                self.seq_encodings.append(seq_encoding)\n",
    "        \n",
    "        # Convert labels to tensor\n",
    "        self.labels = torch.tensor(labels, dtype=torch.long)\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.labels)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        return {\n",
    "            'embeddings': self.embeddings[idx].squeeze(0),\n",
    "            'sequence': self.seq_encodings[idx],\n",
    "            'label': self.labels[idx]\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cell 3: Enhanced Model Architecture with Residual Connections\n",
    "class DNABertMambaWithSequenceClassifier(nn.Module):\n",
    "    def __init__(self, d_model=768, n_classes=3, d_state=16, d_conv=4, expand=2):\n",
    "        super().__init__()\n",
    "        \n",
    "        # Moderate embedding dimension\n",
    "        self.nuc_embedding = nn.Embedding(6, 32)  # 6 tokens (ACGTNP), 32 dimensions\n",
    "        \n",
    "        # Moderate dropout\n",
    "        self.dropout = nn.Dropout(0.2)\n",
    "        \n",
    "        # Balanced combination layer with residual connection\n",
    "        self.combine_layer = nn.Sequential(\n",
    "            nn.Linear(d_model + 32, d_model),\n",
    "            nn.LayerNorm(d_model),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(d_model, d_model),\n",
    "            nn.LayerNorm(d_model),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(0.2)\n",
    "        )\n",
    "        \n",
    "        # Pre-Mamba normalization\n",
    "        self.pre_mamba_norm = nn.LayerNorm(d_model)\n",
    "        \n",
    "        # Full-size Mamba with moderate regularization\n",
    "        self.mamba = Mamba(\n",
    "            d_model=d_model,\n",
    "            d_state=d_state,\n",
    "            d_conv=d_conv,\n",
    "            expand=expand\n",
    "        )\n",
    "        \n",
    "        # Post-Mamba normalization\n",
    "        self.post_mamba_norm = nn.LayerNorm(d_model)\n",
    "        \n",
    "        # Enhanced classification head with residual connections\n",
    "        self.classifier_intermediate = nn.Sequential(\n",
    "            nn.Linear(d_model, d_model // 2),\n",
    "            nn.ReLU(),\n",
    "            nn.LayerNorm(d_model // 2),\n",
    "            nn.Dropout(0.2)\n",
    "        )\n",
    "        \n",
    "        # Skip connection for classification\n",
    "        self.classifier_skip = nn.Linear(d_model, d_model // 2)\n",
    "        \n",
    "        # Final classification layer\n",
    "        self.classifier_final = nn.Sequential(\n",
    "            nn.LayerNorm(d_model // 2),\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(d_model // 2, n_classes)\n",
    "        )\n",
    "        \n",
    "        # Moderate L2 regularization\n",
    "        self.l2_reg_weight = 0.001\n",
    "        \n",
    "        # Initialize weights\n",
    "        self.apply(self._init_weights)\n",
    "        \n",
    "    def _init_weights(self, module):\n",
    "        if isinstance(module, (nn.Linear, nn.Embedding)):\n",
    "            module.weight.data.normal_(mean=0.0, std=0.02)\n",
    "            if isinstance(module, nn.Linear) and module.bias is not None:\n",
    "                module.bias.data.zero_()\n",
    "        elif isinstance(module, nn.LayerNorm):\n",
    "            module.bias.data.zero_()\n",
    "            module.weight.data.fill_(1.0)\n",
    "\n",
    "    def forward(self, embeddings, sequence, labels=None):\n",
    "        # Get nucleotide embeddings\n",
    "        seq_embeddings = self.dropout(self.nuc_embedding(sequence))\n",
    "        \n",
    "        # Combine embeddings\n",
    "        combined = torch.cat([embeddings, seq_embeddings], dim=-1)\n",
    "        x = self.combine_layer(combined)\n",
    "        \n",
    "        # First residual connection: Mamba block\n",
    "        residual = x\n",
    "        x = self.pre_mamba_norm(x)\n",
    "        \n",
    "        # Mamba processing with mixed precision disabled\n",
    "        with torch.cuda.amp.autocast(enabled=False):\n",
    "            x = x.float()\n",
    "            x = self.mamba(x)\n",
    "        \n",
    "        x = self.post_mamba_norm(x)\n",
    "        x = x + residual  # Residual connection\n",
    "        \n",
    "        # Global average pooling with moderate dropout\n",
    "        x = self.dropout(x.mean(dim=1))\n",
    "        \n",
    "        # Second residual connection: Classification head\n",
    "        residual = self.classifier_skip(x)\n",
    "        x = self.classifier_intermediate(x)\n",
    "        x = x + residual  # Residual connection\n",
    "        \n",
    "        # Final classification\n",
    "        logits = self.classifier_final(x)\n",
    "        \n",
    "        if labels is not None:\n",
    "            # Add moderate L2 regularization to loss\n",
    "            l2_reg = 0.0\n",
    "            for param in self.parameters():\n",
    "                if param.requires_grad and param.dim() > 1:\n",
    "                    l2_reg += torch.norm(param, p=2)\n",
    "            \n",
    "            if hasattr(self, 'class_weights'):\n",
    "                loss_fct = nn.CrossEntropyLoss(weight=self.class_weights)\n",
    "            else:\n",
    "                loss_fct = nn.CrossEntropyLoss()\n",
    "            \n",
    "            loss = loss_fct(logits, labels) + self.l2_reg_weight * l2_reg\n",
    "            return loss, logits\n",
    "        return None, logits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cell 4: Model and Data Preparation (Replaces previous prepare_model_and_data)\n",
    "def prepare_model_and_data(train_df, test_df, sample_size=20000):  # Increased from 5000\n",
    "    # Sample the data (keeping the stratified sampling)\n",
    "    train_sample_size = min(sample_size, len(train_df))\n",
    "    test_sample_size = min(sample_size//5, len(test_df))\n",
    "    \n",
    "    train_df_sample = train_df.groupby('kind', group_keys=False).apply(\n",
    "        lambda x: x.sample(n=min(len(x), train_sample_size // 3))\n",
    "    ).reset_index(drop=True)\n",
    "    \n",
    "    test_df_sample = test_df.groupby('kind', group_keys=False).apply(\n",
    "        lambda x: x.sample(n=min(len(x), test_sample_size // 3))\n",
    "    ).reset_index(drop=True)\n",
    "    \n",
    "    # Initialize BERT\n",
    "    model_name = \"zhihan1996/DNABERT-2-117M\"\n",
    "    \n",
    "    # Create config first\n",
    "    config = AutoConfig.from_pretrained(\n",
    "        model_name,\n",
    "        trust_remote_code=True\n",
    "    )\n",
    "    \n",
    "    # Modify config to use standard attention\n",
    "    config.attention_probs_dropout_prob = 0.1\n",
    "    config.hidden_dropout_prob = 0.1\n",
    "    \n",
    "    # Initialize tokenizer\n",
    "    tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)\n",
    "    \n",
    "    # Initialize BERT model\n",
    "    bert_model = AutoModel.from_pretrained(\n",
    "        model_name,\n",
    "        config=config,\n",
    "        trust_remote_code=True\n",
    "    )\n",
    "    \n",
    "    # Force model to float32\n",
    "    bert_model = bert_model.float()\n",
    "    \n",
    "    # Set device\n",
    "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "    print(f\"Using device: {device}\")\n",
    "    \n",
    "    # Calculate class weights\n",
    "    class_counts = train_df_sample['kind'].value_counts()\n",
    "    total_samples = len(train_df_sample)\n",
    "    class_weights = torch.tensor([\n",
    "        total_samples / (len(class_counts) * count) \n",
    "        for count in class_counts\n",
    "    ], dtype=torch.float32).to(device)\n",
    "    \n",
    "    # Freeze BERT and move to device\n",
    "    for param in bert_model.parameters():\n",
    "        param.requires_grad = False\n",
    "    bert_model = bert_model.to(device)\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = DNASequenceAndEmbeddingDataset(\n",
    "        sequences=train_df_sample['sequence'].tolist(),\n",
    "        labels=train_df_sample['kind'].tolist(),\n",
    "        tokenizer=tokenizer,\n",
    "        bert_model=bert_model,\n",
    "        device=device\n",
    "    )\n",
    "    \n",
    "    test_dataset = DNASequenceAndEmbeddingDataset(\n",
    "        sequences=test_df_sample['sequence'].tolist(),\n",
    "        labels=test_df_sample['kind'].tolist(),\n",
    "        tokenizer=tokenizer,\n",
    "        bert_model=bert_model,\n",
    "        device=device\n",
    "    )\n",
    "    \n",
    "    # Create dataloaders\n",
    "    train_dataloader = DataLoader(\n",
    "        train_dataset,\n",
    "        batch_size=32,\n",
    "        shuffle=True,\n",
    "        num_workers=2,\n",
    "        pin_memory=True\n",
    "    )\n",
    "    \n",
    "    test_dataloader = DataLoader(\n",
    "        test_dataset,\n",
    "        batch_size=32,\n",
    "        shuffle=False,\n",
    "        num_workers=2,\n",
    "        pin_memory=True\n",
    "    )\n",
    "    \n",
    "    # Initialize model\n",
    "    model = DNABertMambaWithSequenceClassifier(\n",
    "        d_model=768,\n",
    "        n_classes=3,\n",
    "        d_state=16,\n",
    "        d_conv=4,\n",
    "        expand=2\n",
    "    )\n",
    "    model = model.to(device)\n",
    "    \n",
    "    return model, train_dataloader, test_dataloader, device, class_weights, tokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cell 5: Enhanced Training Function with Regularization\n",
    "from sklearn.metrics import classification_report, f1_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import json\n",
    "import os\n",
    "from torch.optim.lr_scheduler import ReduceLROnPlateau\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "def train_model_enhanced(model, train_dataloader, val_dataloader, device, \n",
    "                        num_epochs=15, patience=5, learning_rate=1e-4):\n",
    "    \n",
    "    # Initialize optimizer with weight decay for L2 regularization\n",
    "    optimizer = torch.optim.AdamW(\n",
    "        model.parameters(),\n",
    "        lr=learning_rate,\n",
    "        weight_decay=0.01,  # L2 regularization\n",
    "        betas=(0.9, 0.999),\n",
    "        eps=1e-8\n",
    "    )\n",
    "    \n",
    "    # Learning rate scheduler that reduces LR on plateau\n",
    "    scheduler = ReduceLROnPlateau(\n",
    "        optimizer,\n",
    "        mode='max',  # Look at validation F1 score\n",
    "        factor=0.5,  # Reduce LR by half when plateauing\n",
    "        patience=2,   # Number of epochs to wait before reducing LR\n",
    "        verbose=True,\n",
    "        min_lr=1e-6\n",
    "    )\n",
    "    \n",
    "    best_val_f1 = 0\n",
    "    patience_counter = 0\n",
    "    best_model_state = None\n",
    "    \n",
    "    history = {\n",
    "        'epoch': [], 'train_loss': [], 'val_loss': [],\n",
    "        'train_acc': [], 'val_acc': [], \n",
    "        'train_f1': [], 'val_f1': [],\n",
    "        'learning_rate': []\n",
    "    }\n",
    "    \n",
    "    for epoch in range(num_epochs):\n",
    "        # Training phase\n",
    "        model.train()\n",
    "        total_train_loss = 0\n",
    "        train_preds, train_labels_list = [], []\n",
    "        \n",
    "        for batch in tqdm(train_dataloader, desc=f'Epoch {epoch + 1}/{num_epochs}'):\n",
    "            embeddings = batch['embeddings'].to(device)\n",
    "            sequence = batch['sequence'].to(device)\n",
    "            labels = batch['label'].to(device)\n",
    "            \n",
    "            # Clear gradients\n",
    "            optimizer.zero_grad()\n",
    "            \n",
    "            # Forward pass with mixed precision\n",
    "            with torch.cuda.amp.autocast():\n",
    "                loss, logits = model(embeddings, sequence, labels)\n",
    "            \n",
    "            # Backward pass with gradient clipping\n",
    "            loss.backward()\n",
    "            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "            optimizer.step()\n",
    "            \n",
    "            total_train_loss += loss.item()\n",
    "            predictions = torch.argmax(logits, dim=1)\n",
    "            train_preds.extend(predictions.cpu().numpy())\n",
    "            train_labels_list.extend(labels.cpu().numpy())\n",
    "        \n",
    "        # Calculate training metrics\n",
    "        train_report = classification_report(train_labels_list, train_preds, output_dict=True)\n",
    "        avg_train_loss = total_train_loss / len(train_dataloader)\n",
    "        train_accuracy = train_report['accuracy']\n",
    "        train_f1 = train_report['macro avg']['f1-score']\n",
    "        \n",
    "        # Validation phase\n",
    "        model.eval()\n",
    "        total_val_loss = 0\n",
    "        val_preds, val_labels_list = [], []\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for batch in val_dataloader:\n",
    "                embeddings = batch['embeddings'].to(device)\n",
    "                sequence = batch['sequence'].to(device)\n",
    "                labels = batch['label'].to(device)\n",
    "                \n",
    "                # Forward pass with mixed precision\n",
    "                with torch.cuda.amp.autocast():\n",
    "                    loss, logits = model(embeddings, sequence, labels)\n",
    "                \n",
    "                total_val_loss += loss.item()\n",
    "                predictions = torch.argmax(logits, dim=1)\n",
    "                val_preds.extend(predictions.cpu().numpy())\n",
    "                val_labels_list.extend(labels.cpu().numpy())\n",
    "        \n",
    "        # Calculate validation metrics\n",
    "        val_report = classification_report(val_labels_list, val_preds, output_dict=True)\n",
    "        avg_val_loss = total_val_loss / len(val_dataloader)\n",
    "        val_accuracy = val_report['accuracy']\n",
    "        val_f1 = val_report['macro avg']['f1-score']\n",
    "        \n",
    "        # Update learning rate based on validation F1 score\n",
    "        scheduler.step(val_f1)\n",
    "        current_lr = optimizer.param_groups[0]['lr']\n",
    "        \n",
    "        # Save history\n",
    "        history['epoch'].append(epoch + 1)\n",
    "        history['train_loss'].append(avg_train_loss)\n",
    "        history['val_loss'].append(avg_val_loss)\n",
    "        history['train_acc'].append(train_accuracy)\n",
    "        history['val_acc'].append(val_accuracy)\n",
    "        history['train_f1'].append(train_f1)\n",
    "        history['val_f1'].append(val_f1)\n",
    "        history['learning_rate'].append(current_lr)\n",
    "        \n",
    "        # Print detailed metrics\n",
    "        print(f'\\nEpoch {epoch + 1}/{num_epochs}:')\n",
    "        print(f'Train Loss: {avg_train_loss:.4f}, Train Acc: {train_accuracy:.4f}, Train F1: {train_f1:.4f}')\n",
    "        print(f'Val Loss: {avg_val_loss:.4f}, Val Acc: {val_accuracy:.4f}, Val F1: {val_f1:.4f}')\n",
    "        print(f'Learning Rate: {current_lr:.2e}')\n",
    "        print(\"\\nDetailed Validation Metrics:\")\n",
    "        for cls in ['0', '1', '2']:\n",
    "            print(f\"Class {cls} - F1: {val_report[cls]['f1-score']:.4f}, \"\n",
    "                  f\"Precision: {val_report[cls]['precision']:.4f}, \"\n",
    "                  f\"Recall: {val_report[cls]['recall']:.4f}\")\n",
    "        \n",
    "        # Early stopping based on F1 score\n",
    "        if val_f1 > best_val_f1:\n",
    "            best_val_f1 = val_f1\n",
    "            best_model_state = model.state_dict().copy()\n",
    "            patience_counter = 0\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            print(f'Early stopping triggered after epoch {epoch + 1}')\n",
    "            break\n",
    "    \n",
    "    # Load best model\n",
    "    if best_model_state is not None:\n",
    "        model.load_state_dict(best_model_state)\n",
    "    \n",
    "    return pd.DataFrame(history), val_report\n",
    "\n",
    "def plot_training_history(history_df):\n",
    "    fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
    "    \n",
    "    # Loss plot\n",
    "    axes[0,0].plot(history_df['epoch'], history_df['train_loss'], label='Train')\n",
    "    axes[0,0].plot(history_df['epoch'], history_df['val_loss'], label='Validation')\n",
    "    axes[0,0].set_title('Loss')\n",
    "    axes[0,0].legend()\n",
    "    \n",
    "    # Accuracy plot\n",
    "    axes[0,1].plot(history_df['epoch'], history_df['train_acc'], label='Train')\n",
    "    axes[0,1].plot(history_df['epoch'], history_df['val_acc'], label='Validation')\n",
    "    axes[0,1].set_title('Accuracy')\n",
    "    axes[0,1].legend()\n",
    "    \n",
    "    # F1 Score plot\n",
    "    axes[1,0].plot(history_df['epoch'], history_df['train_f1'], label='Train')\n",
    "    axes[1,0].plot(history_df['epoch'], history_df['val_f1'], label='Validation')\n",
    "    axes[1,0].set_title('F1 Score')\n",
    "    axes[1,0].legend()\n",
    "    \n",
    "    # Learning Rate plot\n",
    "    axes[1,1].plot(history_df['epoch'], history_df['learning_rate'])\n",
    "    axes[1,1].set_title('Learning Rate')\n",
    "    axes[1,1].set_yscale('log')  # Log scale for learning rate\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "def save_model_and_config(model, tokenizer, save_path='dna_classifier_model'):\n",
    "    os.makedirs(save_path, exist_ok=True)\n",
    "    torch.save(model.state_dict(), os.path.join(save_path, 'model.pt'))\n",
    "    tokenizer.save_pretrained(save_path)\n",
    "    \n",
    "    # Save model configuration\n",
    "    config = {\n",
    "        'model_type': 'DNABertMambaWithSequenceClassifier',\n",
    "        'd_model': 768,\n",
    "        'n_classes': 3,\n",
    "        'd_state': 16,\n",
    "        'd_conv': 4,\n",
    "        'expand': 2\n",
    "    }\n",
    "    with open(os.path.join(save_path, 'config.json'), 'w') as f:\n",
    "        json.dump(config, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1738131/3363612451.py:7: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  train_df_sample = train_df.groupby('kind', group_keys=False).apply(\n",
      "/tmp/ipykernel_1738131/3363612451.py:11: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  test_df_sample = test_df.groupby('kind', group_keys=False).apply(\n",
      "Some weights of BertModel were not initialized from the model checkpoint at zhihan1996/DNABERT-2-117M and are newly initialized: ['pooler.dense.bias', 'pooler.dense.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "82c7949c88054aa0b0b29dd3f0887484",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Computing embeddings:   0%|          | 0/4998 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2b6982c68e3649ffbe65cb1b85f40430",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Computing embeddings:   0%|          | 0/999 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/optim/lr_scheduler.py:60: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "55e31f70a636473e9f34fddee186f4d7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 1/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1/15:\n",
      "Train Loss: 1.5291, Train Acc: 0.4126, Train F1: 0.4104\n",
      "Val Loss: 1.4829, Val Acc: 0.4975, Val F1: 0.3925\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.5263, Precision: 0.4884, Recall: 0.5706\n",
      "Class 1 - F1: 0.0000, Precision: 0.0000, Recall: 0.0000\n",
      "Class 2 - F1: 0.6511, Precision: 0.5033, Recall: 0.9219\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4daebb01f1264548a65302769847a292",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 2/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 2/15:\n",
      "Train Loss: 1.3571, Train Acc: 0.5106, Train F1: 0.5009\n",
      "Val Loss: 1.3113, Val Acc: 0.5435, Val F1: 0.4364\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.5926, Precision: 0.4821, Recall: 0.7688\n",
      "Class 1 - F1: 0.0000, Precision: 0.0000, Recall: 0.0000\n",
      "Class 2 - F1: 0.7166, Precision: 0.6132, Recall: 0.8619\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cb831b9fc9fd41c9a5d99205a92df237",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 3/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 3/15:\n",
      "Train Loss: 1.2811, Train Acc: 0.5446, Train F1: 0.5395\n",
      "Val Loss: 1.3043, Val Acc: 0.5365, Val F1: 0.4371\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.0179, Precision: 1.0000, Recall: 0.0090\n",
      "Class 1 - F1: 0.5568, Precision: 0.4479, Recall: 0.7357\n",
      "Class 2 - F1: 0.7366, Precision: 0.6414, Recall: 0.8649\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4a011ef2ba554b41832542819694d526",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 4/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 4/15:\n",
      "Train Loss: 1.2482, Train Acc: 0.5538, Train F1: 0.5472\n",
      "Val Loss: 1.6226, Val Acc: 0.4414, Val F1: 0.3454\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.0000, Precision: 0.0000, Recall: 0.0000\n",
      "Class 1 - F1: 0.5431, Precision: 0.3736, Recall: 0.9940\n",
      "Class 2 - F1: 0.4933, Precision: 0.9735, Recall: 0.3303\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3184bf23ec24405baf4d2b0ec3f4acbc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 5/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 5/15:\n",
      "Train Loss: 1.2298, Train Acc: 0.5692, Train F1: 0.5643\n",
      "Val Loss: 1.2900, Val Acc: 0.5385, Val F1: 0.4360\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.0000, Precision: 0.0000, Recall: 0.0000\n",
      "Class 1 - F1: 0.5667, Precision: 0.4477, Recall: 0.7718\n",
      "Class 2 - F1: 0.7414, Precision: 0.6612, Recall: 0.8438\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "621933d4750a4ef1aa44adadf94db479",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 6/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 6/15:\n",
      "Train Loss: 1.1685, Train Acc: 0.6006, Train F1: 0.5963\n",
      "Val Loss: 1.2721, Val Acc: 0.5485, Val F1: 0.4472\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.0060, Precision: 1.0000, Recall: 0.0030\n",
      "Class 1 - F1: 0.5791, Precision: 0.4513, Recall: 0.8078\n",
      "Class 2 - F1: 0.7565, Precision: 0.6915, Recall: 0.8348\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "99654fb2e4394383ad40c6c16dab3325",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 7/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 7/15:\n",
      "Train Loss: 1.1202, Train Acc: 0.6120, Train F1: 0.6081\n",
      "Val Loss: 1.3699, Val Acc: 0.5526, Val F1: 0.5111\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.5866, Precision: 0.4363, Recall: 0.8949\n",
      "Class 1 - F1: 0.2162, Precision: 0.5946, Recall: 0.1321\n",
      "Class 2 - F1: 0.7304, Precision: 0.8678, Recall: 0.6306\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e1b0526063924de989ec4f0ccfd7f446",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 8/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 8/15:\n",
      "Train Loss: 1.0940, Train Acc: 0.6150, Train F1: 0.6114\n",
      "Val Loss: 1.3459, Val Acc: 0.5766, Val F1: 0.5001\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.6057, Precision: 0.4889, Recall: 0.7958\n",
      "Class 1 - F1: 0.1283, Precision: 0.5854, Recall: 0.0721\n",
      "Class 2 - F1: 0.7664, Precision: 0.6899, Recall: 0.8619\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "292c67bce97346e196256805dee5a9a6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 9/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 9/15:\n",
      "Train Loss: 1.0266, Train Acc: 0.6555, Train F1: 0.6537\n",
      "Val Loss: 1.3222, Val Acc: 0.5716, Val F1: 0.5675\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.5405, Precision: 0.4975, Recall: 0.5916\n",
      "Class 1 - F1: 0.4113, Precision: 0.4593, Recall: 0.3724\n",
      "Class 2 - F1: 0.7508, Precision: 0.7508, Recall: 0.7508\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d3e2aa411eac4ae084d122f5dbc6dc96",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 10/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 10/15:\n",
      "Train Loss: 1.0123, Train Acc: 0.6551, Train F1: 0.6524\n",
      "Val Loss: 1.4621, Val Acc: 0.5325, Val F1: 0.4415\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.0060, Precision: 0.3333, Recall: 0.0030\n",
      "Class 1 - F1: 0.5880, Precision: 0.4272, Recall: 0.9429\n",
      "Class 2 - F1: 0.7306, Precision: 0.8314, Recall: 0.6517\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4ade039a4bf149a48cf3fbfd8dcc8b07",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 11/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 11/15:\n",
      "Train Loss: 0.9450, Train Acc: 0.6789, Train F1: 0.6762\n",
      "Val Loss: 1.4735, Val Acc: 0.5656, Val F1: 0.4663\n",
      "Learning Rate: 2.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.0176, Precision: 0.3750, Recall: 0.0090\n",
      "Class 1 - F1: 0.6109, Precision: 0.4687, Recall: 0.8769\n",
      "Class 2 - F1: 0.7703, Precision: 0.7337, Recall: 0.8108\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "34ad06a59616431089f5013862dd6cf9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 12/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 12/15:\n",
      "Train Loss: 0.9159, Train Acc: 0.6945, Train F1: 0.6940\n",
      "Val Loss: 1.5961, Val Acc: 0.5415, Val F1: 0.5419\n",
      "Learning Rate: 1.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.3776, Precision: 0.4519, Recall: 0.3243\n",
      "Class 1 - F1: 0.5354, Precision: 0.4408, Recall: 0.6817\n",
      "Class 2 - F1: 0.7128, Precision: 0.8408, Recall: 0.6186\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7609941ce597414bbb5ecf57aa7dd8b6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 13/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 13/15:\n",
      "Train Loss: 0.8357, Train Acc: 0.7467, Train F1: 0.7464\n",
      "Val Loss: 1.7043, Val Acc: 0.5786, Val F1: 0.5494\n",
      "Learning Rate: 1.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.5697, Precision: 0.4833, Recall: 0.6937\n",
      "Class 1 - F1: 0.3178, Precision: 0.5396, Recall: 0.2252\n",
      "Class 2 - F1: 0.7608, Precision: 0.7120, Recall: 0.8168\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "48b1ecbab83a4de7aa953b14cff5d45e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 14/15:   0%|          | 0/157 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:58: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n",
      "=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "/tmp/ipykernel_1738131/2336290816.py:89: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast():\n",
      "/tmp/ipykernel_1738131/989508061.py:84: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  with torch.cuda.amp.autocast(enabled=False):\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 14/15:\n",
      "Train Loss: 0.8040, Train Acc: 0.7719, Train F1: 0.7712\n",
      "Val Loss: 1.7968, Val Acc: 0.5696, Val F1: 0.5444\n",
      "Learning Rate: 1.00e-04\n",
      "\n",
      "Detailed Validation Metrics:\n",
      "Class 0 - F1: 0.5753, Precision: 0.4618, Recall: 0.7628\n",
      "Class 1 - F1: 0.3090, Precision: 0.5414, Recall: 0.2162\n",
      "Class 2 - F1: 0.7488, Precision: 0.7690, Recall: 0.7297\n",
      "Early stopping triggered after epoch 14\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABdIAAAPdCAYAAACOcJpIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3gU1dvG8e9uegeSAAm9d0ITpCkIgqBU6QoCNn4qitjA+lqxIjasIApKL6KCiogCAipI6L1DAiGB9L477x8DwVATSDIp9+e69srs7szsvRuMJ0/OPMdmGIaBiIiIiIiIiIiIiIhclN3qACIiIiIiIiIiIiIihZkK6SIiIiIiIiIiIiIil6FCuoiIiIiIiIiIiIjIZaiQLiIiIiIiIiIiIiJyGSqki4iIiIiIiIiIiIhchgrpIiIiIiIiIiIiIiKXoUK6iIiIiIiIiIiIiMhlqJAuIiIiIiIiIiIiInIZKqSLiIiIiIiIiIiIiFyGCukiIoXYtGnTsNlsrF+/3uooIiIiIiJyEe+//z42m42GDRtaHUVERPKRCukiIiIiIiIiIldp6tSpAGzbto2//vrL4jQiIpJfVEgXEREREREREbkK69evZ9OmTdx6660ATJkyxeJEF5ecnGx1BBGRIk+FdBGRIm716tV06tQJPz8/vL29adOmDT/++GO2fZKTk3n88cepVq0anp6elClThhYtWjBz5sysffbv38+gQYMIDQ3Fw8ODcuXK0alTJ8LDwwv4HYmIiIiIFA1nC+evv/46bdq0YdasWRcUrY8dO8Z9991HpUqVcHd3JzQ0lH79+nHixImsfWJjY3nssceoXr06Hh4elC1blu7du7Nz504Afv/9d2w2G7///nu2cx88eBCbzca0adOyHhs+fDi+vr5s2bKFLl264OfnR6dOnQBYtmwZvXr1omLFinh6elKzZk3uv/9+oqOjL3hvO3fuZPDgwZQrVw4PDw8qV67MsGHDSEtL4+DBg7i6ujJhwoQLjlu5ciU2m425c+de1WcqIlJYuVodQERErt4ff/zBzTffTOPGjZkyZQoeHh5MnjyZHj16MHPmTAYOHAjA2LFjmT59Oq+88gpNmzYlKSmJrVu3EhMTk3Wu7t2743A4ePPNN6lcuTLR0dGsWbOG2NhYi96diIiIiEjhlZKSwsyZM7nuuuto2LAhI0eO5J577mHu3LncddddgFlEv+6668jIyODpp5+mcePGxMTE8PPPP3P69GnKlStHQkIC7dq14+DBgzz11FO0atWKxMREVq5cSWRkJHXr1s11tvT0dHr27Mn999/PuHHjyMzMBGDfvn20bt2ae+65h4CAAA4ePMjEiRNp164dW7Zswc3NDYBNmzbRrl07goKCeOmll6hVqxaRkZEsXryY9PR0qlatSs+ePfnkk0948skncXFxyXrtDz/8kNDQUPr06ZMHn7KISOGhQrqISBE2btw4Spcuze+//46vry8At912G02aNOHxxx9nwIAB2Gw2/vzzT7p06cKjjz6adezZy08BYmJi2LVrF5MmTeLOO+/Merxv374F92ZERERERIqQefPmERcXx9133w3AwIEDGTNmDFOmTMkqpD///PNER0ezadMm6tWrl3XsgAEDsrYnTZrEtm3bWLZsGZ07d856/FrG4hkZGTz//POMGDEi2+OjRo3K2jYMgzZt2tChQweqVKnC0qVL6dmzJ2BOxHF1deXvv/8mODg465g77rgja/vhhx+mY8eOfP/99/Tu3RuAiIgIFi5cyHPPPYerq0pOIlK8qLWLiEgRlZSUxF9//UW/fv2yiugALi4uDB06lKNHj7Jr1y4AWrZsydKlSxk3bhy///47KSkp2c5VpkwZatSowVtvvcXEiRPZuHEjTqezQN+PiIiIiEhRMmXKFLy8vBg0aBAAvr6+9O/fn1WrVrFnzx4Ali5dSseOHbMV0c+3dOlSateuna2Inhduv/32Cx6Liopi1KhRVKpUCVdXV9zc3KhSpQoAO3bsAMy2kH/88QcDBgzIVkQ/X4cOHQgLC+Ojjz7KeuyTTz7BZrNx33335el7EREpDFRIFxEpok6fPo1hGISEhFzwXGhoKEBW65b333+fp556ikWLFtGxY0fKlClD7969swb4NpuN5cuX07VrV958802aNWtGcHAwDz/8MAkJCQX3pkREREREioC9e/eycuVKbr31VgzDIDY2ltjYWPr16wfA1KlTATh58iQVK1a87Llysk9ueXt74+/vn+0xp9NJly5dWLBgAU8++STLly/n77//Zt26dQBZk21Onz6Nw+HIUaaHH36Y5cuXs2vXLjIyMvj888/p168f5cuXz9P3IyJSGKiQLiJSRJUuXRq73U5kZOQFz0VERAAQFBQEgI+PDy+++CI7d+7k+PHjfPzxx6xbt44ePXpkHVOlShWmTJnC8ePH2bVrF48++iiTJ0/miSeeKJg3JCIiIiJSREydOhXDMJg3bx6lS5fOup1tn/jVV1/hcDgIDg7m6NGjlz1XTvbx9PQEIC0tLdvjF1skFMyJMufbunUrmzZt4q233mL06NF06NCB6667jsDAwGz7lSlTBhcXlytmAhgyZAiBgYF89NFHzJ07l+PHj/Pggw9e8TgRkaJIhXQRkSLKx8eHVq1asWDBgmytWpxOJzNmzKBixYrUrl37guPKlSvH8OHDGTx4MLt27SI5OfmCfWrXrs2zzz5Lo0aN+Pfff/P1fYiIiIiIFCUOh4OvvvqKGjVqsGLFigtujz32GJGRkSxdupRu3bqxYsWKrJaLF9OtWzd2797Nb7/9dsl9qlatCsDmzZuzPb548eIc5z5bXPfw8Mj2+KeffprtvpeXFzfeeCNz5869ZKH+LE9PT+677z6++uorJk6cSJMmTWjbtm2OM4mIFCVa+UFEpAj47bffOHjw4AWPT5gwgZtvvpmOHTvy+OOP4+7uzuTJk9m6dSszZ87MGiy3atWK2267jcaNG1O6dGl27NjB9OnTad26Nd7e3mzevJmHHnqI/v37U6tWLdzd3fntt9/YvHkz48aNK+B3KyIiIiJSeC1dupSIiAjeeOMNOnTocMHzDRs25MMPP2TKlCl8+OGHLF26lBtuuIGnn36aRo0aERsby08//cTYsWOpW7cuY8aMYfbs2fTq1Ytx48bRsmVLUlJS+OOPP7jtttvo2LEj5cuXp3PnzkyYMIHSpUtTpUoVli9fzoIFC3Kcu27dutSoUYNx48ZhGAZlypTh+++/Z9myZRfsO3HiRNq1a0erVq0YN24cNWvW5MSJEyxevJhPP/0UPz+/rH0feOAB3nzzTTZs2MAXX3xxVZ+piEhRoEK6iEgR8NRTT1308QMHDvDbb7/xwgsvMHz4cJxOJ2FhYSxevJjbbrsta7+bbrqJxYsX8+6775KcnEyFChUYNmwYzzzzDADly5enRo0aTJ48mSNHjmCz2ahevTrvvPMOo0ePLpD3KCIiIiJSFEyZMgV3d3dGjBhx0eeDgoLo06cP8+bN45NPPuHvv//mhRde4PXXXycmJobg4GDatWtHmTJlAPDz82P16tX83//9H5999hkvvvgipUuX5rrrrsu2aOf06dMZPXo0Tz31FA6Hgx49ejBz5kxatGiRo9xubm58//33PPLII9x///24urrSuXNnfv31VypXrpxt37CwsKzc48ePJyEhgfLly3PTTTfh7u6ebd8KFSrQrl07Nm/ezJAhQ3LzUYqIFCk2wzAMq0OIiIiIiIiIiEjRExUVRZUqVRg9ejRvvvmm1XFERPKNZqSLiIiIiIiIiEiuHD16lP379/PWW29ht9t55JFHrI4kIpKvtNioiIiIiIiIiIjkyhdffEGHDh3Ytm0b33zzDRUqVLA6kohIvlJrFxERERERERERERGRy9CMdBERERERERERERGRy1AhXURERERERERERETkMorEYqNOp5OIiAj8/Pyw2WxWxxERERGRYswwDBISEggNDcVu17yTgqaxv4iIiIgUlNyM/YtEIT0iIoJKlSpZHUNERERESpAjR45QsWJFq2OUOBr7i4iIiEhBy8nYv0gU0v38/ADzDfn7+1ucRkRERESKs/j4eCpVqpQ1BpWCpbG/iIiIiBSU3Iz9i0Qh/ewlnf7+/hpMi4iIiEiBUFsRa2jsLyIiIiIFLSdjfzV9FBERERERERERERG5DBXSRUREREREREREREQuQ4V0EREREREREREREZHLKBI90nPK4XCQkZFhdQzJA25ubri4uFgdQ0REREQKIY37ixd3d3fsds3xEhERkcKtWBTSDcPg+PHjxMbGWh1F8lCpUqUoX768FvoSEREREUDj/uLKbrdTrVo13N3drY4iIiIicknFopB+djBdtmxZvL29VXgt4gzDIDk5maioKABCQkIsTiQiIiIihYHG/cWP0+kkIiKCyMhIKleurO+piIiIFFpFvpDucDiyBtOBgYFWx5E84uXlBUBUVBRly5ZVmxcRERGREk7j/uIrODiYiIgIMjMzcXNzszqOiIiIyEUV+UZ0Z3sjent7W5xE8trZ76n6X4qIiIiIxv3F19mWLg6Hw+IkIiIiIpdW5AvpZ+kSwOJH31MREREROZ/GiMWPvqciIiJSFBSbQrqIiIiIiIiIiIiISH5QIV1ERERERERERERE5DJUSC9GOnTowJgxY6yOISIiIiIi+UxjfxEREZGCletC+sqVK+nRowehoaHYbDYWLVp0xWO++eYbwsLC8Pb2JiQkhBEjRhATE3M1eYsFm8122dvw4cOv6rwLFizg5ZdfztuwIiIi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IiIiIiIiImehQrqIiIiIiIiIiIiIyFmokF5LOTs789RTT+Hs7Gx2lDpF190cuu7m0HU3h667OXTdzaHrLnJu9HfFHLru5tB1N4euuzl03c2h6171aso1rxGLjYqIiIiIiIiIiIiImEUz0kVEREREREREREREzkKFdBERERERERERERGRs1AhXURERERERERERETkLFRIFxERERERERERERE5CxXSa5kpU6bQuXNnPD09CQgIYNiwYezevdvsWHXKlClTsFgs3HvvvWZHqRMSExMZPXo09erVw83Njfbt27Np0yazY9VqJSUlPP7440RGRuLq6kqjRo149tlnsVqtZkerVZYvX87QoUMJDg7GYrGwcOHCco/bbDaefvppgoODcXV1pW/fvmzfvt2csLXI2a57cXExDz/8MG3btsXd3Z3g4GDGjh3L4cOHzQtcS/zbn/e/u+2227BYLEydOrXK8olUVxr7m09j/6qjcX/V07i/amjcbw6N+81R08f9KqTXMsuWLeOuu+5i7dq1LF68mJKSEgYMGEBeXp7Z0eqEDRs2MGPGDNq1a2d2lDohIyODHj164OjoyE8//cSOHTv43//+h4+Pj9nRarWXX36Z6dOn884777Bz505eeeUVXn31Vd5++22zo9UqeXl5XHTRRbzzzjunffyVV17h9ddf55133mHDhg0EBQVx6aWXkpOTU8VJa5ezXff8/Hw2b97ME088webNm5k/fz579uzh//7v/0xIWrv825/3ExYuXMi6desIDg6uomQi1ZvG/ubS2L/qaNxvDo37q4bG/ebQuN8cNX7cb5NaLSUlxQbYli1bZnaUWi8nJ8fWtGlT2+LFi219+vSxTZw40exItd7DDz9s69mzp9kx6pwhQ4bYxo8fX27fVVddZRs9erRJiWo/wLZgwYKy+1ar1RYUFGR76aWXyvYVFBTYvL29bdOnTzchYe30z+t+OuvXr7cBtri4uKoJVQec6bofOnTIFhISYvvrr79s4eHhtjfeeKPKs4lUdxr7Vx2N/auWxv3m0Li/6mncbw6N+81RE8f9mpFey2VlZQHg5+dncpLa76677mLIkCFccsklZkepM7777js6derENddcQ0BAAFFRUXzwwQdmx6r1evbsye+//86ePXsA2Lp1KytXrmTw4MEmJ6s7YmNjSU5OZsCAAWX7nJ2d6dOnD6tXrzYxWd2TlZWFxWLRjLhKZrVaGTNmDA8++CCtW7c2O45ItaWxf9XR2L9qadxvDo37zadxf/WhcX/VqO7jfgezA0jlsdlsTJo0iZ49e9KmTRuz49RqX3zxBZs3b2bDhg1mR6lTDhw4wLRp05g0aRKPPvoo69evZ8KECTg7OzN27Fiz49VaDz/8MFlZWbRo0QJ7e3tKS0t54YUXuO6668yOVmckJycDEBgYWG5/YGAgcXFxZkSqkwoKCnjkkUcYNWoUXl5eZsep1V5++WUcHByYMGGC2VFEqi2N/auOxv5VT+N+c2jcbz6N+6sHjfurTnUf96uQXovdfffd/Pnnn6xcudLsKLVaQkICEydO5Ndff8XFxcXsOHWK1WqlU6dOvPjiiwBERUWxfft2pk2bpgF1JZo3bx5z5sxh7ty5tG7dmpiYGO69916Cg4O54YYbzI5Xp1gslnL3bTbbKfukchQXF3PttdditVp57733zI5Tq23atIk333yTzZs368+3yFlo7F81NPY3h8b95tC4v/rQuN88GvdXnZow7ldrl1rqnnvu4bvvvmPJkiU0bNjQ7Di12qZNm0hJSaFjx444ODjg4ODAsmXLeOutt3BwcKC0tNTsiLVWgwYNaNWqVbl9LVu2JD4+3qREdcODDz7II488wrXXXkvbtm0ZM2YM9913H1OmTDE7Wp0RFBQEnJyhckJKSsops1Wk4hUXFzNixAhiY2NZvHixZqVUshUrVpCSkkJYWFjZ/2fj4uK4//77iYiIMDueSLWgsX/V0djfHBr3m0PjfvNp3G8ujfurVk0Y92tGei1js9m45557WLBgAUuXLiUyMtLsSLVe//792bZtW7l948aNo0WLFjz88MPY29ublKz269GjB7t37y63b8+ePYSHh5uUqG7Iz8/Hzq7857D29vZYrVaTEtU9kZGRBAUFsXjxYqKiogAoKipi2bJlvPzyyyanq91ODKb37t3LkiVLqFevntmRar0xY8ac0oN44MCBjBkzhnHjxpmUSqR60Ni/6mnsbw6N+82hcb/5NO43j8b9Va8mjPtVSK9l7rrrLubOncu3336Lp6dn2aeW3t7euLq6mpyudvL09DylD6W7uzv16tVTf8pKdt9999G9e3defPFFRowYwfr165kxYwYzZswwO1qtNnToUF544QXCwsJo3bo1W7Zs4fXXX2f8+PFmR6tVcnNz2bdvX9n92NhYYmJi8PPzIywsjHvvvZcXX3yRpk2b0rRpU1588UXc3NwYNWqUialrvrNd9+DgYIYPH87mzZv54YcfKC0tLfv/rJ+fH05OTmbFrvH+7c/7P39xcXR0JCgoiObNm1d1VJFqRWP/qqexvzk07jeHxv1VQ+N+c2jcb44aP+63Sa0CnPY2c+ZMs6PVKX369LFNnDjR7Bh1wvfff29r06aNzdnZ2daiRQvbjBkzzI5U62VnZ9smTpxoCwsLs7m4uNgaNWpke+yxx2yFhYVmR6tVlixZctp/z2+44QabzWazWa1W21NPPWULCgqyOTs723r37m3btm2buaFrgbNd99jY2DP+f3bJkiVmR6/R/u3P+z+Fh4fb3njjjSrNKFIdaexfPWjsXzU07q96GvdXDY37zaFxvzlq+rjfYrPZbBVZmBcRERERERERERERqU202KiIiIiIiIiIiIiIyFmokC4iIiIiIiIiIiIichYqpIuIiIiIiIiIiIiInIUK6SIiIiIiIiIiIiIiZ6FCuoiIiIiIiIiIiIjIWaiQLiIiIiIiIiIiIiJyFiqki4iIiIiIiIiIiIichQrpIiIiIiIiIiIiIiJnoUK6iIiIiIiIiIiIiMhZqJAuIiIiIiIiIiIiInIWKqSLiIiIiIiIiIiIiJyFCukiIiIiIiIiIiIiImehQrqIiIiIiIiIiIiIyFmokC4iIiIiIiIiIiIichYqpIuIiIiIiIiIiIiInIUK6SIiIiIiIiIiIiIiZ6FCuoiIiIiIiIiIiIjIWaiQLiJSCWbNmoXFYjnt7YEHHig77ocffmDs2LG0bdsWR0dHLBbLeb1OWloakydPplWrVri7u+Pt7U2LFi0YM2YMf/75Z0W/LRERERERERGROsnB7AAiIrXZzJkzadGiRbl9wcHBZdsLFixg7dq1REVF4ezszKZNm8753Lm5uURHR5Obm8uDDz7IRRddxLFjx9izZw/z588nJiaGdu3aVdh7ERERERGpqWbNmsW4cePYsGEDnTp1MjvOeenbty8AS5cuNeW1ly1bVnbf2dmZRo0aMWrUKB566CGcnJzO+5w7duzgyy+/5MYbbyQiIqIC04qIVC4V0kVEKlGbNm3OOlD/4IMPsLMzvhx09913n1ch/auvvmLfvn388ccf9OvXr9xjkyZNwmq1/rfQ/0FxcTEWiwUHB/1vRURERESkIr333numvn6jRo347LPPADh69CgffvghTzzxBPHx8cyYMeO8z7djxw6eeeYZ+vbtq0K6iNQoau0iImKiE0X0/yItLQ2ABg0anNO5d+3axXXXXUdgYCDOzs6EhYUxduxYCgsLy47566+/uOKKK/D19cXFxYX27dvzySeflDvP0qVLsVgszJ49m/vvv5+QkBCcnZ3Zt28fAL/99hv9+/fHy8sLNzc3evTowe+///6f36eIiIiISG1hs9k4duzYeT2nVatWtGrVqpIS/TtXV1eio6OJjo5m6NChfPPNNzRt2pRPPvmEgoIC03KJiFQ1FdJFRCpRaWkpJSUl5W4VpVu3bgCMHTuWhQsXlhXWT2fr1q107tyZtWvX8uyzz/LTTz8xZcoUCgsLKSoqAmD37t10796d7du389ZbbzF//nxatWrFjTfeyCuvvHLKOSdPnkx8fDzTp0/n+++/JyAggDlz5jBgwAC8vLz45JNP+PLLL/Hz82PgwIEqpouIiIhItbd3715GjRpFQEAAzs7OtGzZknfffbfcMQUFBdx///20b98eb29v/Pz86NatG99+++0p57NYLNx9991Mnz6dli1b4uzszCeffFK2ptKSJUu444478Pf3p169elx11VUcPny43Dn69u1b1t4F4ODBg1gsFl577TVef/11IiMj8fDwoFu3bqxdu/aUDB988AHNmjXD2dmZVq1aMXfu3Atqq+Lg4ED79u0pKioiMzOzbP/GjRu59tpriYiIwNXVlYiICK677jri4uLKjpk1axbXXHMNAP369StbR2rWrFllx2hijohUV/oOvohIJYqOjj5lX3FxcYW0QOnRowfPPvsszz//PFdeeSUAkZGRDBw4kDvuuKNcf/RJkybh4ODA+vXrqV+/ftn+66+/vmz76aefpqioiCVLlhAaGgrA4MGDyczM5JlnnuG2227D29u77PjGjRvz1Vdfld3Pz89n4sSJXH755SxYsKBs/+DBg+nQoQOPPvoo69atu+D3LSIiIiJSGXbs2EH37t0JCwvjf//7H0FBQfzyyy9MmDCB1NRUnnrqKQAKCwtJT0/ngQceICQkhKKiIn777TeuuuoqZs6cydixY8udd+HChaxYsYInn3ySoKAgAgIC2LBhAwA333wzQ4YMYe7cuSQkJPDggw8yevRo/vjjj3/N++67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L9asVfv0zqq9yswvVliAt37XrYkCfWvd29azWrx48Un3Z86cqUaNGikhIUF9+/Y96WMul0ujR49W69atNXv2bDkc5vvRHTt2qH///ho3bpyeeOKJ015j8ODBGjx48DlzvPrqqxo5cqRGjRolSZo8ebK+/vprTZ8+XZMmTZIkJSQknPXxa9as0ezZszV37lzl5OSouLhYwcHBeu65587/RahhhmHotW93WR0DAIBaJfFYnv51axerYwBVptZ9R2Kz2apsvIqVTi3IX3nlFf373//W5MmT1alTJwUGBmrs2LEqKio65/OcujLJZrPJ5XJVeV4AAICLkZ5bpHdW7dWsVfuUXVgiSWrRMFBjBrSSr1et29anQjIzMyWdeWN5u92uRYsWqW/fvho+fLjef/997d27VwMGDNCNN954xhL9QhQVFSkhIUFPPfXUSecHDRp0wavLJ02aVF64z5o1S7/++us5S/SpU6dq6tSpcjqdlcp8MWw2m4b3jK3x1wUAoDY6cCxP320/oj1Hcq2OAlQpz2+c64iVK1dq6NChuvfeeyWZq4927typ9u3bW5wMAACg8o7mFOqtlXv1/o/7lFtkFqhtIuppzIDWuq5TYznsNosTWsswDI0fP15XXHGFOnbseMZroqKi9O2336pv3766++679eOPP2rgwIF64403Kv26aWlpcjqdioiIOOl8RESEDh06VOnnPZfRo0dr9OjRysrKUkhISLW8xtk47Da9MPTMX18AAFAxGxLT9d32I0rKyLc6ClClKNI9RKtWrfTZZ59p9erVCgsL06uvvqpDhw5RpAMAAI+UmlWgGSv26MOfEpVfbBbolzQO1h8GttKgSyJlr+MFepnHHntMv/zyi3744YdzXhcTE6P33ntPV155pVq0aKG3335bNtvFfw1PfQ7DMCr1vCNGjLjoLAAAwDNEh/lLkg5nFajY6ZK3o27/diFqD4p0D/Hss89q7969uuaaaxQQEKCHHnpIN910U/mv+gIAAHiClMx8vfn9Hn38c6IKS8xxc12ahGjMgNYa2L5RlZS/tcWYMWP0xRdfaMWKFWrSpMk5rz18+LAeeughDRkyRGvXrtW4ceP0+uuvV/q1GzRoIIfDcdrq89TU1NNWqQMAAJyoQaCvfBx2FTldOpRZoKbhAVZHAqoERbrFRowYcdIKnWbNmskwjNOuCw8P1/z588/5XMuXLz/p/r59+067ZuPGjRUPCQAAcJEOpudp+vLdmrvuoIqcZoHeLSZUfxjYWle2aUiBfgLDMDRmzBjNmzdPy5cvV/Pmzc95fVpamgYOHKj27dtr7ty52rlzp/r16ydfX1+9/PLLlcrg4+OjuLg4LVmyRDfffHP5+SVLlmjo0KGVek4AAFA32O02RYX6ad/RPCVn5FOko9agSAcAAEC12X80V9O+263P1h9UictcLNCjebj+MLC1erWsT4F+BqNHj9ZHH32kBQsWKCgoqHxVeEhIiPz9/U+61uVy6dprr1VsbKzmzJkjLy8vtW/fXkuXLlX//v0VHR2tcePGnfYaOTk52rVrV/n9vXv3auPGjQoPD1dMTIwkafz48Ro2bJji4+PVs2dPzZgxQ4mJiXr44Yer8bMHAAC1QVSov/YdzWNOOmoVinQAAABUud1HcjT1u11asDFZztIC/YpWDTRmQCv1aFHf4nTubfr06ZKkfv36nXR+5syZp80at9vtmjRpkvr06SMfH5/y8506ddLSpUtVv/6Zv9br1q1T//79y++PHz9eknTfffdp1qxZkqQ77rhDR48e1QsvvKCUlBR17NhRixYtUmxs7EV+hgAAoLaLDjV/+J9MkY5ahCIdAAAAVWbH4WxN+XaX/vdLskr7c/Vr21BjBrRWXGyYteE8xJnG/J3L1VdffcbzXbt2Petj+vXrd0Gv8+ijj+rRRx+tUB4AAICo0iKdFemoTSjSAQAAcNG2JGdpync7tWjz8c0pr2ofoTEDWqlL01DrggEAAKDGRYeVFekFFicBqg5FOgAAACpt88FMvfbtTi3Zcrj83OCOkXpsQCt1iAqxMBkAAACsUjbaJSk9z+IkQNWhSAcAAECFrU9M1+vLduq77UckSTabdEPnKD3Wv5XaRgZZnA4AAABWOj4jvUCGYbDBPGoFinQAAABcsJ/3HtNry3bqh11pkiSH3aahXaL0aP9WatWonsXpAAAA4A4iQ/wkSfnFTqXnFSs80Oc8jwDcH0U6AAAAzskwDP24+6he+3an1uw5Jknystt0S7doPdqvlZo1CLQ4IQAAANyJn7dDDYN8dSS7UMkZ+RTpqBUo0gEAAHBGhmFoxc40vbZspxL2p0uSvB023RbfVI9c2VJNwwMsTggAAAB3FRXqryPZhTqYnq+O0eydA89ntzoAKqdfv34aO3Zs+f1mzZpp8uTJ53yMzWbT/PnzL/q1q+p5AACAezIMQ8u2HtZNU1fpvnd+VsL+dPl42TWiVzOteKK/Xry5EyU6AAAAzqlJ+Zz0fIuTAFWDFekWGDJkiPLz87V06dLTPvbjjz+qV69eSkhIULdu3S74OdeuXavAwKr9ter/+7//0/z587Vx48aTzqekpCgsLKxKXwsAAFjP5TL0zZbDev3bnfotOUuS5Odt1709YvVQ3xZqFOxncUIAAAB4iqhQ871jEkU6agmKdAuMHDlSt9xyi/bv36/Y2NiTPvbOO++oa9euFSrRJalhw4ZVGfGcIiMja+y1AABA9XO6DC3anKIp3+7S9sPZkqQAH4eG92ymUX2aq0E9X4sTAgAAwNNEsyIdtUztG+1iGFJRrjU3w7igiDfccIMaNWqkWbNmnXQ+Ly9Pc+bM0U033aS77rpLTZo0UUBAgDp16qSPP/74nM956miXnTt3qm/fvvLz89Mll1yiJUuWnPaYJ598Um3atFFAQIBatGihZ599VsXFxZKkWbNm6fnnn9emTZtks9lks9nK85462mXz5s0aMGCA/P39Vb9+fT300EPKyckp//iIESN000036eWXX1bjxo1Vv359jR49uvy1AACANUqcLs3fkKRB//5eYz7eoO2HsxXk66UxA1pp1ZMD9NTgdpToAAAAqJSo0iKdFemoLWrfivTiPOnFKGte+8/Jks/5x6t4eXlp+PDhmjVrlp577jnZbDZJ0ty5c1VUVKRRo0bp448/1pNPPqng4GAtXLhQw4YNU4sWLdSjR4/zPr/L5dItt9yiBg0aaM2aNcrKyjppnnqZoKAgzZo1S1FRUdq8ebMefPBBBQUF6YknntAdd9yhX3/9VYsXLy4fQRMScvrGEHl5ebr22mt1+eWXa+3atUpNTdWoUaP02GOPnfSDgu+++06NGzfWd999p127dumOO+5Q165d9eCDD5738wEAAFWruLRAn/rdLu07midJCvH31gO9m2tE72YK8fe2OCEAAAA8XXQYK9JRu9S+It1DPPDAA3rppZe0fPly9e/fX5I51uWWW25RdHS0JkyYUH7tmDFjtHjxYs2dO/eCivSlS5dq69at2rdvn5o0aSJJevHFFzV48OCTrvvLX/5SftysWTP98Y9/1Jw5c/TEE0/I399f9erVk5eX1zlHuXz44YfKz8/Xe++9Vz6jfcqUKRoyZIj++c9/KiIiQpIUFhamKVOmyOFwqF27drr++uu1bNkyinQAAGpQUYlLnyYc1LTlu3Qw3fyGJizAW6P6tNDwnrEK8qNABwAAQNUoG+2SllOkgmKn/LwdFicCLk7tK9K9A8yV4Va99gVq166devXqpXfeeUf9+/fX7t27tXLlSn3zzTdyOp36xz/+oTlz5igpKUmFhYUqLCy84M1Et27dqpiYmPISXZJ69ux52nWffvqpJk+erF27diknJ0clJSUKDg6+4M+h7LW6dOlyUrbevXvL5XJp+/bt5UV6hw4d5HAc/z/Mxo0ba/PmzRV6LQAAUDkFxU59su6A3li+W8mZBZKkBvV89VDf5rqnR6wCfWvfW0IAAABYK8TfW4E+DuUWOZWcka8WDetZHQm4KLXvuyab7YLGq7iDkSNH6rHHHtPUqVM1c+ZMxcbGauDAgXrppZf073//W5MnT1anTp0UGBiosWPHqqio6IKe1zjDrPay8TFl1qxZozvvvFPPP/+8rrnmGoWEhGj27Nl65ZVXKvQ5GIZx2nOf6TW9vb1P+5jL5arQawEAgIoxDEMfrNmv17/dpdTsQklSRLCvft+3pe66LEb+PqwKAgAAQPWw2WyKDvPXjsM5SqJIRy1Q+4p0D3L77bfr8ccf10cffaR3331XDz74oGw2m1auXKmhQ4fq3nvvlWTOPN+5c6fat29/Qc97ySWXKDExUcnJyYqKMufF//jjjydds2rVKsXGxuqZZ54pP7d///6TrvHx8ZHT6Tzva7377rvKzc0tX5W+atUq2e12tWnT5oLyAgCAqmcYhl5ctFVvrdwrSYoK8dMj/Vrqtvim/FotAAAAakRUqFmkMycdtYHd6gB1Wb169XTHHXfoz3/+s5KTkzVixAhJUqtWrbRkyRKtXr1aW7du1e9//3sdOnTogp/3qquuUtu2bTV8+HBt2rRJK1euPKkwL3uNxMREzZ49W7t379Zrr72mefPmnXRNs2bNtHfvXm3cuFFpaWkqLCw87bXuuece+fn56b777tOvv/6q7777TmPGjNGwYcPKx7oAAICa98o3O8pL9KcHt9PyP/XXsJ7NKNEBAABQY8rmpCelU6TD81GkW2zkyJFKT0/XVVddpZiYGEnSs88+q27duumaa65Rv379FBkZqZtuuumCn9Nut2vevHkqLCzUZZddplGjRmnixIknXTN06FCNGzdOjz32mLp27arVq1fr2WefPema3/3ud7r22mvVv39/NWzYUB9//PFprxUQEKCvv/5ax44dU/fu3XXrrbdq4MCBmjJlSsW/GAAAoEq8vmynpny3S5L0/I0d9PsrW8rHi7d9AAAAqFlRZUV6RoHFSYCLZzPONFDbzWRlZSkkJESZmZmnbYZZUFCgvXv3qnnz5vLz87MoIaoDf7cAAFTcm9/v1qSvtkmSnrmuvR7s28LiRJ7nXO89Uf34+gMAUHss2Jikx2dv1OUtwjX7oZ5WxwFOU5H3nixNAgAAqCVmrdpbXqJPGNSGEh0AAACWKluRnsyKdNQCFOkAAAC1wEc/Jer/vtwiSRozoJUeG9Da4kQAAACo68pmpKdk5svlcvuhGMA5UaQDAAB4uE8TDuqZ+ZslSb/v20Ljr25jcSIAAABAahTkK4fdpmKnoSM5hVbHAS4KRToAAIAHW7AxSU98ukmGIY3o1UxPDW4nm81mdSwAAABAXg67IoPNfe8OpudbnAa4OLWmSPeAPVNRQfydAgBwbot/TdH4TzbJZUh3XRajvw65hBIdAAAAbiW6fE46RTo8m8cX6d7e3pKkvLw8i5OgqpX9nZb9HQMAgOOWbT2sMR9vkNNl6HfdmmjiTR0p0QEAAOB2osPMIj2JIh0ezsvqABfL4XAoNDRUqampkqSAgAC+ifRwhmEoLy9PqampCg0NlcPhsDoSAABuZcWOI3rkg/Uqdhoa0iVK/7q1s+x23v8AAADA/USFmqNdWJEOT+fxRbokRUZGSlJ5mY7aITQ0tPzvFgAAmH7cfVQPvrdORU6Xru0QqVdv7yIHJToAAADcVHRogCQpiRnp8HC1oki32Wxq3LixGjVqpOLiYqvjoAp4e3uzEh0AgFOs23dMI99dq8ISlwa0a6TX7rpU3g6Pn9QHAACAWqxsRTqjXeDpakWRXsbhcFC+AgCAWmnjgQyNmLlWeUVO9WndQNPu6SYfL0p0AAAAuLcmzEhHLcF3XwAAAG7ut+RMDX/7J+UUlujyFuGaMSxeft4sHgAAAID7iwo1i/TsghJlFTBJAp6LIh0AAMCNbT+UrXv/+5OyCkoUFxumt+/rLn8fSnQAAAB4hgAfL4UFeEtiw1F4Nop0AAAAN7X7SI7u+e9PSs8rVpcmIZp5f3cF+taqyXwAAACoA8pWpVOkw5NRpAMAALih/Udzdfdba5SWU6hLGgfrvQd6KNjP2+pYAAAAQIVFlxbpSekU6fBcFOkAAABu5mB6nu5+6ycdzipUm4h6+mBUD4UEUKIDAADAM5WtSE/KKLA4CVB5FOkAAABu5FBmge5+6yclZeSrRcNAfTjqcoUH+lgdCwAAAKi0JmFlRTor0uG5KNIBAADcRGp2ge5+a40Sj+UpJjxAH426XA2DfK2OBQAAAFwUZqSjNqBIBwAAcANHcwp1739/0p60XEWH+uujB3soMsTP6lgAAADARWNGOmoDinQAAACLZeQVadjbP2vH4RxFBPvqowd7qElYgNWxAAAAgCpRtiL9cHaBip0ui9MAlUORDgAAYKGsgmLd987P2pKSpQb1fPXRg5crtn6g1bEAAACAKtOgno98vOwyDHNPIMATUaQDAABYJLewRPfPXKtNBzMVHuijjx7soZYN61kdCwAAAKhSNpvt+HgX5qTDQ1GkAwAAWCC/yKmR765Vwv50Bft56f2Rl6lNRJDVsQAAAIBqwZx0eDqKdAAAgBpWUOzUQ++v05o9x1TP10vvj+yhDlEhVscCAAAAqk1UqJ8kKZkV6fBQFOkAAAA1qKjEpUc/XK+VO9MU4OPQrPu7q0vTUKtjAQAAANUqOjRAEqNd4Lko0gEAAGpIsdOlMR+v17fbUuXnbdfb93VXfLNwq2MBAAAA1a5sRTpFOjwVRToAAEANcLoMjf9kk77+7bB8vOx6a3i8erasb3UsAAAAoEZEh7HZKDwbRToAAEA1c7kMPfHpL/pyU7K8HTZNv6eb+rRuaHUsAAAAoMaUbTaanJEvwzAsTgNUHEU6AABANTIMQ8/M36zP1h+Uw27T63ddqoHtI6yOBQAAANSoyBA/2WxSQbFLx3KLrI4DVBhFOgAAQDUxDEPPf7lFH/98QHab9O87uurajo2tjgXUqLy8PMXGxmrChAlWRwEAABby9XKoYT1fSYx3gWeiSAcAAKgGhmFo0lfbNGv1Ptls0ku3dtGNXaKsjgXUuIkTJ6pHjx5WxwAAAG6gbE56MkU6PBBFOgAAQDX495IdmrFijyRp4k2d9Lu4JhYnAmrezp07tW3bNl133XVWRwEAAG4gqnRO+sF0inR4Hop0AACAKjbl25167dtdkqT/G3KJ7u4RY3EiWGXFihUaMmSIoqKiZLPZNH/+/HNeX1JSor/85S9q3ry5/P391aJFC73wwgtyuVyW5Jo2bZqaN28uPz8/xcXFaeXKlRV6nQkTJmjSpElVkBgAANQGTco3HC2wOAlQcRTpAAAAVWjGit16+ZsdkqQ/X9dOI3o3tzgRrJSbm6suXbpoypQpF3T9P//5T73xxhuaMmWKtm7dqn/961966aWX9Prrr5/1MatWrVJxcfFp57dt26ZDhw5VOtecOXM0duxYPfPMM9qwYYP69OmjwYMHKzExsfyauLg4dezY8bRbcnKyFixYoDZt2qhNmzYX9LkDAIDar2xFelJGnsVJgIrzsjoAAABAbfHu6n16cdE2SdIfr26jh/q2tDgRrDZ48GANHjz4gq//8ccfNXToUF1//fWSpGbNmunjjz/WunXrzni9y+XS6NGj1bp1a82ePVsOh0OStGPHDvXv31/jxo3TE088Ualcr776qkaOHKlRo0ZJkiZPnqyvv/5a06dPL19lnpCQcNbHr1mzRrNnz9bcuXOVk5Oj4uJiBQcH67nnnjvj9VOnTtXUqVPldDrPmQsAAHiuaFakw4OxIh0AAKAKfPxzov76xW+SpDEDWmnMwNYWJ4InuuKKK7Rs2TLt2GH+VsOmTZv0ww8/nHXGuN1u16JFi7RhwwYNHz5cLpdLu3fv1oABA3TjjTeesUS/EEVFRUpISNCgQYNOOj9o0CCtXr36gp5j0qRJOnDggPbt26eXX35ZDz744FlLdEkaPXq0tmzZorVr11YqMwAAcH/HV6QzIx2ehxXpAAAAF+mzhIP687zNkqSH+rbQ+KsZZYHKefLJJ5WZmal27drJ4XDI6XRq4sSJuuuuu876mKioKH377bfq27ev7r77bv34448aOHCg3njjjUrnSEtLk9PpVERExEnnIyIizjouBgAA4Hyiw8wi/VhukfKLnPL3cVicCLhwlVqRXpFNh0aMGCGbzXbarUOHDpUODQAA4C6+3JSsP326SYYh3dczVk8PbiebzWZ1LHioOXPm6IMPPtBHH32k9evX691339XLL7+sd99995yPi4mJ0Xvvvac5c+bIy8tLb7/9dpX8Ozz1OQzDqNTzjhgxQi+//PJF5wEAAJ4t2M9L9XzNdb2sSoenqXCRfiGbDp3oP//5j1JSUspvBw4cUHh4uG677baLDg8AAGClxb8e0tg5G+UypLsua6q/DulAiY6L8qc//UlPPfWU7rzzTnXq1EnDhg3TuHHjymeSn83hw4f10EMPaciQIcrLy9O4ceMuKkeDBg3kcDhOW32empp62ip1AACAC2Wz2U6Yk06RDs9S4SL9xE2H2rdvr8mTJ6tp06aaPn36Ga8PCQlRZGRk+W3dunVKT0/X/ffff9bXKCwsVFZW1kk3AAAAd/LttsMa8/F6OV2GbukWrYk3dZLdTomOi5OXlye7/eS36A6HQy6X66yPSUtL08CBA9W+fXt9/vnn+vbbb/XJJ59owoQJlc7h4+OjuLg4LVmy5KTzS5YsUa9evSr9vAAAAFGhfpJYkQ7PU6EZ6WWbDj311FMnna/IpkNvv/22rrrqKsXGxp71mkmTJun555+vSDQAAIAas3LnET38wXoVOw0N6RKll27tQomOM8rJydGuXbvK7+/du1cbN25UeHi4YmJiNGXKFM2bN0/Lli2TJA0ZMkQTJ05UTEyMOnTooA0bNujVV1/VAw88cMbnd7lcuvbaaxUbG1s+1qV9+/ZaunSp+vfvr+jo6DOuTj9fLkkaP368hg0bpvj4ePXs2VMzZsxQYmKiHn744ar8EgEAgDqmbE46K9LhaSpUpF/spkMpKSn66quv9NFHH53zuqefflrjx48vv5+VlaWmTZtWJCoAAEC1WLPnqB58b52KSly6pkOEXr29ixyU6DiLdevWqX///uX3y97j3nfffZo1a5bS0tK0e/fu8o+//vrrevbZZ/Xoo48qNTVVUVFR+v3vf6/nnnvujM9vt9s1adIk9enTRz4+PuXnO3XqpKVLl6p+/fqVyiVJd9xxh44ePaoXXnhBKSkp6tixoxYtWnTOBTEAAADnE1U62iUpnSIdnsVmGIZxoRcnJycrOjpaq1evVs+ePcvPT5w4Ue+//762bdt2zsdPmjRJr7zyipKTk096o38+WVlZCgkJUWZmpoKDgy/4cQAAAFUpYf8xDXv7Z+UVOTWgXSO9cW+cfLwqtXc73BjvPa3F1x8AgNptwcYkPT57o3o0D9ec3/c8/wOAalSR954V+s7vYjYdMgxD77zzjoYNG1ahEh0AAMAdbDqQoRHvrFVekVN9WjfQtHu6UaIDAAAAFVS22Sgz0uFpKvTd38VsOvT9999r165dGjlyZMVTAgAAWOi35EwNf+dnZReWqEfzcM0YFi8/b4fVsQAAAACPUzYj/VBmgZyuCx6UAViuQjPSpfNvOvT0008rKSlJ77333kmPe/vtt9WjRw917NixapIDAABUoxKnSz/sStMXG5O1+LdDyityKi42TO+M6C5/H0p0AAAAoDIaBfnJy25TictQanaBGof4Wx0JuCAVLtLPt+lQSkqKEhMTT3pMZmamPvvsM/3nP/+pmtQAAADVwDAMrU9M14KNyVr4S4qO5haVfyw+Nkzv3N9dgb4VfvsEAAAAoJTDblNkiJ8OpucrOSOfIh0eo1LfCT766KN69NFHz/ixWbNmnXYuJCREeXl5lXkpAACAarfjcLYWbEzSgo3JOph+fFZj/UAf3dC5sW7sGq1uMaGy2WwWpgQAAABqh6hQfx1Mz9fB9HzFxVqdBrgwLKkCAAB10sH0PH25KUULNiZp26Hs8vOBPg5d0yFSN3aNUu9WDeTtYENRAAAAoCo1CfXXz5KSMwqsjgJcMIp0AABQZxzLLdLCzSn6YmOS1u5LLz/v7bCpX9tGGto1SgPbRTADHQAAAKhGUaHmOJekDCZYwHNQpAMAgFott7BES7ce1vwNSVq5M00lLkOSZLNJPZqHa2jXaA3uGKnQAB+LkwIAAAB1Q3SYWaSzIh2ehCIdAADUOkUlLq3ceUQLNiZryZbDyi92ln+sY3SwhnaJ1g1dGrOxEQAAAGCB8hXpJ+xPBLg7inQAAFAruFyG1u1P1/yNSVq0OUUZecXlH4utH6ChXaN1Y5cotWpUz8KUAAAAAKJDy1akU6TDc1CkAwAAj2UYhramZGvBpiR9uTFZyZnHfzW0QT1fDenSWDd1jVbnJiGy2WwWJgUAAABQJirUT5KUXViizPxihfh7W5wIOD+KdAAA4HESj+bpi01JWrAxWTtTc8rPB/l66dqOkRraNVo9W9aXw055DgAAALibAB8vhQf66FhukZIz8inS4REo0gEAgEc4kl2ohb8ka8GmZG1IzCg/7+Nl18B2jTS0a5T6tW0kP2+HdSEBAAAAXJCoUD8dyy1SUnq+2jcOtjoOcF4U6QAAwG1lFxTrm98Oa8GmZK3alSany5Ak2W1Sr5YNdGPXKF3TIZIVLAAAAICHiQ71169JWUrOZE46PANFOgAAcCuFJU4t335EX2xM1tKth1VY4ir/WJemoRraJUo3dG6sRsF+FqYEAAAAcDGiSjccTUqnSIdnoEgHAACWc7oM/bTnqBZsTNZXv6Yoq6Ck/GMtGgZqaJdoDe0apWYNAi1MCQAAAKCqRJcV6RkU6fAMFOkAAMAShmHo16QsLdiYpC9/SdbhrMLyj0UE++rGLlEa2jVaHaKCZbOxaSgAAABQm1Ckw9NQpAMAgBq1Ny1XCzYm6YuNydqTllt+PtjPS9d3bqwbu0TrsubhctgpzwEAAIDaKjrMLNKTKdLhISjSAQBAtcsrKtGnCQf1acJB/XIws/y8r5ddV10SoZu6Rqtvmwby9XJYmBIAAABATSmbkZ6aXaiiEpd8vOwWJwLOjSIdAABUm4y8Ir27er9mrd6r9LxiSZLDbtMVrRpoaNcoDeoQqXq+vB0BAAAA6pr6gT7y9bKrsMSlQ5kFiqkfYHUk4Jz4zhUAAFS5lMx8/XflXn38c6LyipySpJjwAN3fu5mGdIlSg3q+FicEAAAAYCWbzaboUH/tScvVwYw8inS4PYp0AABQZXal5mjGit2atyFJxU5DknRJ42A90q+lBneMlJeDX9cEAAAAYIoOM4v05IwCq6MA50WRDgAALtqmAxmavny3vt5ySIbZn+vyFuF6pF8r9W3dQDYbG4cCAAAAOFl06Zz0pHQ2HIX7o0gHAACVYhiGftiVpunLd2v17qPl5wddEqGH+7VUt5gwC9MBAAAAcHdlG44mZ1Ckw/1RpAMAgApxugwt/vWQpn+/S78mZUmSvOw23XRptH7ft4VaRwRZnBAAAACAJyhfkU6RDg9AkQ4AAC5IYYlT89Yn6c0Ve7Q3LVeS5O/t0J2XNdWoPi3K3wQDAAAAwIVgRTo8CUU6AAA4p+yCYn38c6L+u3KvUrMLJUmhAd66r2cz3dermcIDfSxOCAAAAMATNQk7viLdMAz2VoJbo0gHAABnlJZTqFmr9um9H/cpq6BEktQ4xE+j+rTQnd2bKtCXtxEAAAAAKi8i2E82m1RY4tLR3CI1qOdrdSTgrPgOGAAAnOTAsTy9tXKP5qw9oMISlySpZcNAPXxlSw3tGi0fL7vFCQEAAADUBj5edkUE+elQVoGS0vMp0uHWKNIBAIAkaduhLL2xfLe+/CVFTpchSerSNFSPXNlSgy6JkN3Or1kCAAAAqFpRoWaRnpyRry5NQ62OA5wVRToAAHXcun3HNG35bn27LbX8XJ/WDfRIv5bq2aI+cwoBAAAAVJvosACtT8xQEhuOws1RpAMAUAcZhqHvtqdq+vLdWrsvXZJks0nXdWqsR65sqY7RIRYnBAAAAFAXRIX6SRJFOtweRToAAHVIidOl//2Soje+361th7IlST4Ou34X10QP9W2h5g0CLU4IAAAAoC5pEuovSUpKp0iHe6NIBwCgDsgvcmpuwgHNWLFHB0vfoNbz9dI9l8doZO/mahTsZ3FCAAAAAHVRVGmRnpxJkQ73RpEOAEAtlplXrPfX7NPMVft0NLdIktSgno/u791c914eqxB/b4sTAgAAAKjLosNYkQ7PQJEOAEAtdDirQO/8sFcf/pSonMISSVKTMH/9vm8L3RbfVH7eDosTAgAAAMDxFenpecXKKypRgA91JdwT/zIBAKhF9qblasaK3fosIUlFTpckqV1kkB7p11LXd2osL4fd4oQAAAAAcFywn7eC/LyUXVCi5Ix8tWoUZHUk4Iwo0gEAqAU2H8zUG9/v1qJfU2QY5rnLmoXrkX4t1a9tQ9lsNmsDAgAAAMBZRIf6a9uhbCVlFFCkw21RpAMA4KEMw9CPu49q+ve7tXJnWvn5ge0a6ZF+LRXfLNzCdAAAAABwYcqLdOakw41RpAMA6pRip0tTvt2lDQcy5OOwy9fLLm+HTT5edvl42eXtMP/0dRw/PvFjvl52+ZzysfLzZR8r/dPnhD8d9qpbEe5yGfpmyyFNX75bmw5mSpIcdptu7BKl31/ZQu0ig6vstQAAAACgupXNSU/KyLM4CXB2FOkAgDojPbdIj3yYoDV7jtX4azvsNrOwd9jl4+U4c4F/Svl+ajHv62WX3W7T178d0p4juZIkXy+77uzeVKP6tFDT8IAa/7wAAAAA4GJFh5lFenJGgcVJgLOjSAcA1Am7UrM18t112n80T/V8vTTu6jYK8HGoqMRl3pzH/yw+5X7ZNcXOE88bpeedKi47Ln1sYek1J3K6DDldhgqKXZJKLvrzCfbz0n29mum+Xs3UoJ7vRT8fAAAAAFilfEU6o13gxijSAQC13vLtqRrz0QZlF5aoabi/3r6vu9pEVO8GNoZhqMRlnLGoLy/lz1Tin3TeOGOJH1s/QLfFN1U9X/4zDgAAAMDzRZePdqFIh/viO3AAQK1lGIZmrtqnvy/cIpchXdYsXNPv7ab6NbCC22YzR7l4O+wKZME4AAAAAJxVWZF+KKtAJU6XvBx2ixMBp6NIBwDUSsVOl55b8Js+/jlRknRbXBNNvLmTfLx4QwYAAAAA7qRRkK+8HTYVOw2lZheWj3oB3AlFOgCg1jlxU1GbTfrz4PYa1ae5bDab1dEAAAAAAKew222KDPHTgWP5SsrIp0iHW6JIBwDUKiduKhro49Brd12qge0jrI4FAAAAADiH6FB/HTiWr2TmpMNNUaQDAGqNEzcVbRJmbiraNrJ6NxUFAAAAAFy8slXoB9Mp0uGeKNIBAB7Pyk1FAQAAAAAXr0lpkc6KdLgrinQAgEdjU1EAAAAA8HxlK9KTKNLhpijSAQAei01FAQAAAKB2iA5jRTrcG0U6AMAjsakoAAAAANQe5SvS0/NlGAYLpOB2KNIBAB7n+x1H9NiH69lUFAAAAABqiejSIj23yKms/BKFBHhbnAg4GQNkAQAew9xUdK/un/mzsgtL1L1ZmBaM7k2JDgBuLC8vT7GxsZowYYLVUQAAgBvz83aofqCPJOlgRp7FaYDTUaQDADxCsdOlP8/7Vc9/uUUuw9xU9INRPVS/nq/V0QAA5zBx4kT16NHD6hgAAMADHJ+TXmBxEuB0FOkAALeXnlukYW//pI9/TjQ3Fb2unf51a2f5ejmsjgYAOIedO3dq27Ztuu6666yOAgAAPEBUSNmcdFakw/1QpAMA3Nqu1GzdNG2V1uw5pkAfh/47PF4P9W3JxjMA3N6KFSs0ZMgQRUVFyWazaf78+Rf0uKSkJN17772qX7++AgIC1LVrVyUkJNR4tmnTpql58+by8/NTXFycVq5cWeHXmTBhgiZNmlQFiQEAQF1QviI9kxXpcD8U6QAAt/X9jiO6eepq7T+apyZh/vr80d4a2D7C6lgAcEFyc3PVpUsXTZky5YIfk56ert69e8vb21tfffWVtmzZoldeeUWhoaFnvH7VqlUqLi4+7fy2bdt06NChSmebM2eOxo4dq2eeeUYbNmxQnz59NHjwYCUmJpZfExcXp44dO552S05OliQtWLBAbdq0UZs2bS748wcAAHVbVGjZivR8i5MAp/OyOgAAAKcyDEOzVu/T3/5nzkPv3ixMb9wbxzx0AB5l8ODBGjx4cIUe889//lNNmzbVzJkzy881a9bsjNe6XC6NHj1arVu31uzZs+VwmOOuduzYof79+2vcuHF64oknKpXt1Vdf1ciRIzVq1ChJ0uTJk/X1119r+vTp5SvMz7dKfs2aNZo9e7bmzp2rnJwcFRcXKzg4WM8999wZr586daqmTp0qp9N5zucFAAC1V3RZkZ5BkQ73w4p0AIBbYVNRAHXZF198ofj4eN12221q1KiRLr30Ur311ltnvNZut2vRokXasGGDhg8fLpfLpd27d2vAgAG68cYbz1qin09RUZESEhI0aNCgk84PGjRIq1evvuDnmTRpkg4cOKB9+/bp5Zdf1oMPPnjWEl2SRo8erS1btmjt2rWVyg0AADwfRTrcGUU6AMBtsKkogLpuz549mj59ulq3bq2vv/5aDz/8sP7whz/ovffeO+P1UVFR+vbbb7Vq1SrdfffdGjBggAYOHKg33nij0hnS0tLkdDoVEXHyKK2IiIhzjosBAAC4WGUz0o9kF6qwhN9Sg3thtAsAwC3sSs3WyHfXaf/RPAX6OPTaXZcyDx1AneNyuRQfH68XX3xRknTppZfqt99+0/Tp0zV8+PAzPiYmJkbvvfeerrzySrVo0UJvv/12lWzIfOpzGIZR6ecdMWLERecBAAC1X1iAt/y87Soodiklo0DNGgRaHQkox4p0AIDlTt1U9LNHe1GiA6iTGjdurEsuueSkc+3btz9pk89THT58WA899JCGDBmivLw8jRs37qIyNGjQQA6H47TV56mpqaetUgcAAKhKNputfLxLMuNd4GYo0gEAljEMQzNX7dX9M39WdmGJ4mPDNH90b7WLDLY6GgBYonfv3tq+fftJ53bs2KHY2NgzXp+WlqaBAweqffv2+vzzz/Xtt9/qk08+0YQJEyqdwcfHR3FxcVqyZMlJ55csWaJevXpV+nkBAAAuRFRpkX6QIh1uhtEuAABLFDtdem7Bb/r4Z3OV5a1xTTTx5o7MQwdQa+Tk5GjXrl3l9/fu3auNGzcqPDxcMTExmjJliubNm6dly5aVXzNu3Dj16tVLL774om6//Xb9/PPPmjFjhmbMmHHa87tcLl177bWKjY3VnDlz5OXlpfbt22vp0qXq37+/oqOjz7o6/XzZxo8fr2HDhik+Pl49e/bUjBkzlJiYqIcffrgKv0IAAACnaxLGinS4J4p0AECNS88t0qMfrtePe47KZpOeHtxOD/ZpUSUzfQHAXaxbt079+/cvvz9+/HhJ0n333adZs2YpLS1Nu3fvPukx3bt317x58/T000/rhRdeUPPmzTV58mTdc889pz2/3W7XpEmT1KdPH/n4+JSf79Spk5YuXar69etXOtsdd9yho0eP6oUXXlBKSoo6duyoRYsWnXVlPAAAQFWJCjGL9KR0inS4F5thGIbVIc4nKytLISEhyszMVHAwv+4PAJ5sV2qORr67lk1FAbgt3ntai68/AAB12+frD2r8J5vUu1V9fTjqcqvjoJaryHtPVqQDAGrM9zuO6LGP1iu7oERNwvz13/vimYcOAAAAAChXNiOdFelwNxTpAIBqZxiGZq3ep7/9b4tchhQfG6Y3hsWpQT1fq6MBAAAAANxIdGmRnpxZIJfLkN3OCFC4B4p0AEC1YlNRAAAAAMCFigzxk90mFZW4lJZbqEZBflZHAiRRpAMAqtGpm4o+dW07PdSXTUUBAAAAAGfm7bArIthPKZkFSs4ooEiH27BbHQAAUDvtSs3RTdNW6cc9RxXo49Bbw+L1+ytbUqIDAAAAAM6JOelwRxTpAIAqt2LHEd08bZX2H81TdKi/Pnu0l666JMLqWAAAAAAAD1A+Jz2DIh3ug9EuAIAqw6aiAAAAAICLVb4inSIdboQiHQBQJdhUFAAAAABQFaLDKNLhfijSAQAXjU1FAQAAAABVJTrU3GCUGelwJxTpAICLsis1RyPfXav9R/MU6OPQf+68lHnoAAAAAIBKiw4NkCQlZ1Kkw31QpAMAKm3FjiMa/dF6ZReUKDrUX2+PiFe7yGCrYwEAAAAAPFhU6Yr0jLxi5RaWKNCXChPW418hAOA0hmEov9iprPwSZRUUKzO/WFn5J/5ZokNZBZqzNpFNRQEAAAAAVSrIz1vBfl7KKihRcka+WkcEWR0JoEgHgNqq2OlSdkHJ8QK8vBAvOeV+sbIKzHPZJ1xb7DQu6HV+162JXryFTUUBAAAAAFUnKtRfWYeydZAiHW6CIh0A3JRhGMotch4vu8tL7pKTV4gXmOV41inleG6R86IzOOw2Bft5KcTfW8H+3uafft4K9vdSsL+3OkWH6PpOjdlUFAAAAABQpZqE+WvboWwlZzAnHe6BIh0ALFBY4tSvSZlauy9d+4/mlq8UP3WVuNN1YavCz6Wer5eC/czi+9QyvOy4rCgP9vNSSMDxcwE+DkpyAAAAAECNiwr1lyQlpVOkwz1QpANADcjML9b6/elau++Y1u1L18aDGSoqcV3QY30c9tIS3OuEEtxbIf5ep5TgZcfHrwvy85KXw17Nnx0AAAAAAFUrurRIZ0U63AVFOgBUg6SMfK3bd6y8ON9+OFvGKYvL6wf6KL5ZmC5pHKLQgNNL8LKC3NfLzqpwAAAAAECdUr4inSIdboIiHQAuktNlaMfh7NLiPF3r9h1TcmbBade1aBCo+GZhim8Wru7NwtWsfgAFOQAAAAAAZxAdVrYi/fTvrwErUKQDQAUVFDu16UCG1pWOaknYn67sgpKTrvGy29QhOkTdY83iPC42TA2DfC1KDAAAAACAZykb7XIoq0AlThdjS2E5inQAOI9juUVaV1qYr913TJuTMlXsPHlOS6CPQ91iw9S9Wbjim4Wpa9NQBfjwf7EAAAAAAFRGw3q+8nbYVOw0dDi7sLxYB6xSqZZn2rRpeumll5SSkqIOHTpo8uTJ6tOnz1mvLyws1AsvvKAPPvhAhw4dUpMmTfTMM8/ogQceqHRwAKgOhmEo8Vhe+YiWtfuOafeR3NOuaxTkq+7Nw8tXnLeLDOKn4wAAAAAAVBG73abGIf5KPJanpPR8inRYrsJF+pw5czR27FhNmzZNvXv31ptvvqnBgwdry5YtiomJOeNjbr/9dh0+fFhvv/22WrVqpdTUVJWUlJzxWgCoSSVOl7amZJubgu43Z5wfyS487brWjeqVzjY3V503CfNnvjkAAAAAANUoOtQs0pPZcBRuoMJF+quvvqqRI0dq1KhRkqTJkyfr66+/1vTp0zVp0qTTrl+8eLG+//577dmzR+Hh4ZKkZs2anfM1CgsLVVh4vMjKysqqaEwAOKPcwhJtPJBhFuf70rU+MV15Rc6TrvF22NS5Sajim4Wpe6w53zws0MeixAAAAAAA1E1RpavQkyjS4QYqVKQXFRUpISFBTz311EnnBw0apNWrV5/xMV988YXi4+P1r3/9S++//74CAwN144036m9/+5v8/c/8KxmTJk3S888/X5FoAHBGqdkFStiXbo5q2X9MvyVnyek6eb55kJ+X4ktHtHRvFq7OTULk5+2wKDEAAAAAAJCk6DCKdLiPChXpaWlpcjqdioiIOOl8RESEDh06dMbH7NmzRz/88IP8/Pw0b948paWl6dFHH9WxY8f0zjvvnPExTz/9tMaPH19+PysrS02bNq1IVAB1kGEY2pOWWzrb3Jxxvu9o3mnXRYf6K75ZWPmoljaNgmS3M6YFAAAAAAB3Eh3qJ0lKSqdIh/UqtdnoqXOBDcM466xgl8slm82mDz/8UCEhIZLM8TC33nqrpk6desZV6b6+vvL19a1MNAB1jGEYWrg5RV9sTNa6/ek6llt00sdtNqltRJC6NwsvL8/ZoAQAAAAAAPcXHRogiRXpcA8VKtIbNGggh8Nx2urz1NTU01apl2ncuLGio6PLS3RJat++vQzD0MGDB9W6detKxAYAKfFonp6Zv1krd6aVn/P1sqtL01B1Ly3Nu8WEKcTf28KUAAAAAACgMspGuyRn5J9zIS9QEypUpPv4+CguLk5LlizRzTffXH5+yZIlGjp06Bkf07t3b82dO1c5OTmqV6+eJGnHjh2y2+1q0qTJRUQHUFcVO116+4e9mrx0hwqKXfLxsuvBPs01sH2EOkaFyMfLbnVEAAAAAABwkRqHmKNd8oqcysgrVligj8WJUJdVuG0aP368/vvf/+qdd97R1q1bNW7cOCUmJurhhx+WZM43Hz58ePn1d999t+rXr6/7779fW7Zs0YoVK/SnP/1JDzzwwFk3GwWAs9l4IENDXv9B//hqmwqKXerZor4WP95Hf7qmnbrFhFGiAwAAAABQS/h5O9Sgnjn+mfEusFqFZ6TfcccdOnr0qF544QWlpKSoY8eOWrRokWJjYyVJKSkpSkxMLL++Xr16WrJkicaMGaP4+HjVr19ft99+u/7+979X3WcBoNbLKSzRy19v17s/7pNhSKEB3nrmuva6Na4Jv9oFAAAAAEAtFR3qp7ScQiVl5KtjdMj5HwBUk0ptNvroo4/q0UcfPePHZs2addq5du3aacmSJZV5KQDQN78d0l+/+E0pmQWSpFsujdYz17dX/XpsSgwAAAAAQG0WHeavTQczlcyKdFisUkU6ANSEQ5kF+r8vftPi38wNjmPCAzTx5o7q07qhxckAAAAAAEBNiAoxR0MnpVOkw1oU6QDcjstl6MOf9uufi7crp7BEDrtND/VtoT8MaC1/H4fV8QAAAAAAQA2JDjOL9ORMinRYiyIdgFvZdihLT3++WRsSMyRJXZuGatItndS+cbC1wQAAAAAAQI2LCmVFOtwDRToAt1BQ7NRry3Zqxoo9KnEZqufrpT9d01b3Xh4rh53NRAEAAAAAqIuiy4r0jAKLk6Cuo0gHYLlVu9L053mbtf9oniTpmg4R+r8bO6hx6Rw0AAAAAABQN5UV6Wk5hSoodsrPm5GvsAZFOgDLHM0p1MSFW/X5hiRJUmSwn54f2kHXdIi0OBkAAAAAAHAHoQHeCvBxKK/IqZTMAjVvEGh1JNRRFOkAapxhGPp8fZL+vnCL0vOKZbNJwy+P1YRr2irIz9vqeAAAAAAAwE3YbDZFhfprV2qOktLzKdJhGYp0ADVqX1qunpm/Wat2HZUktYsM0ou3dFK3mDCLkwEAAAAAAHcUXVqkJ2ew4SisQ5EOoEYUlbj01so9em3ZThWWuOTrZdfjV7XWg31ayNthtzoeAAAAAABwU1Glc9IPUqTDQhTpAKpdwv50/fnzzdp+OFuS1Kd1A/39po6Krc+vYwEAAAAAgHNrEmYW6axIh5Uo0gFUm6yCYv1r8TZ9+FOiDEMKD/TRsze0101do2Wz2ayOBwAAAAAAPEBUqJ8kKSmdIh3WoUgHUOUMw9DiXw/pr1/8ptTsQknSrXFN9Mx17RUW6GNxOgAAAAAA4EmiQwMkScmZFOmwDkU6gCqVnJGv5xb8pqVbD0uSmtUP0Is3d1KvVg0sTgYAAAAAADxR2Yr0lIwCuVyG7HZ+yx01jyIdQJVwugy99+M+vfz1duUWOeVlt+nhK1vqsQGt5OftsDoeAAAAAADwUJHBfrLbpCKnS2k5hWoU7Gd1JNRBFOkALtqW5Cw9/fkv2nQwU5IUFxumSbd0UpuIIIuTAQAAAAAAT+flsCsy2E/JmQU6mJFPkQ5LUKQDqLT8IqcmL92h//6wV06XoSBfLz05uJ3uviyGX7MCAAAAAABVJjrMX8mZBUrOyFe3mDCr46AOokgHUCnf7ziiv8zfrAPHzI0+rusUqb8O6aAIfioMAAAAAACqWFSov6R0JaWz4SisQZEOoELScgr1t/9t0YKNyZKkqBA/vTC0o666JMLiZAAAAAAAoLaKDvWXJCVnUKTDGhTpAC6IYRiau+6gJi7aqsz8Ytlt0ohezfXHQW0U6Mv/lQAAAAAAgOoTVVqkJ1GkwyK0XwDOa/eRHD0zb7PW7DkmSbqkcbD+8btO6twk1NpgAAAAAACgTogOKyvSCyxOgrqKIh3AWRWWOPXG8j2a+t0uFTld8vd2aNzVrfVA7+byctitjgcAAAAAAOqIstEuSel5FidBXUWRDuCM1u47pqc/36xdqTmSpCvbNNTfb+qopuEBFicDLlJxgfTJMMlZLN0zV3J4W50IAAAAAHAeZaNdsgpKlF1QrCA/vpdDzaJIB3CSzLxi/WPxNn38c6IkqUE9Hz03pIOGdG4sm81mcTqgCnz9Z2nnN+bx9kXSJUOtzQMAAAAAOK96vl4K8fdWZn6xkjMK1DaSIh01iyIdgCRzM9GFm1P0f19sUVpOoSTpzu5N9dTgdgoN8LE4HVBFfv1MWvf28fvrZlKkAwAAAICHiA71Ly3S89U2MsjqOKhjKNKBOi45I1+LNqfoy19StOlAhiSpRcNATbq5k3q0qG9tOKAqpe2SvviDedzlbmnTx9Ke76Rje6TwFtZmAwAAAACcV1Sov7akZOlgRr7VUVAHUaQDdVBKZr4WbT6khb8ka31iRvl5H4ddj/RrqUf7t5Svl8O6gEBVK86X5t4nFeVIsVdIN74u5RyWdi+TEt6Vrn7e6oQAAAAAgPNoEmbOSU+mSIcFKNKBOuJQZoG++jVFC39J0br96eXnbTape7Nw3dC5sa7tGKlGQX4WpgSqyVdPSod/lQIbSre+LTm8pPj7zSJ9wwdS/2ckL0YYAQAAAIA7iwo1O4ukdIp01DyKdKAWO5xVoK82p2jR5kNau/+YDMM8b7NJ3WPDdV2nSA3u1FgRwZTnqMV++URa/64km3TLW1JQpHm+zbVSvUgp55C07Uup4+8sjQkAAAAAOLfo0ABJrEiHNSjSgVomNbtAi389pP/9kqK1+46X55IUHxum6zs31uCOjRUZQnmOOuDIDunLsebxlU9ILfsf/5jDW+o2TFrxkrnpKEU6AAAAALi18hXpFOmwAEU6UAscyS7U4t/Mmec/7T25PO8WE6rrO0fpuk6Rahzib11IoKYV5Zlz0YtzpeZ9pSufPP2absOlFS9L+1aam5E2aFXzOQEAAAAAFyS6dEb64awCFTtd8nbYLU6EuoQiHfBQaTmFWvzrIS3anKI1e47KdUJ53rVpqG7o3FiDOzVWdCjlOeqor/4kpW6RAhtJt/xXsp9hA93QGKn11dLOb6SEmdI1E2s+JwAAAADggjQI9JWPw64ip0uHMgvUNDzA6kioQyjSAQ9yNKdQX/92WAs3J+vH3SeX512ahuqGTo01uFOkmoTxHxLUcRs/NjcRtdnNzUWDIs5+bfwDZpG+8SNpwLOSN2OPAKAq5eXlqX379rrtttv08ssvWx0HAAB4MLvdpqhQP+07mqfkjHyKdNQoinTAzaXnFunr3w5p4eYUrd59VM4T2vPOTUJ0fafGuq5TY/7jAZRJ3SYtHG8e93vaHOtyLq2uloKjpawkaeuXUufbqj8jANQhEydOVI8ePayOAQAAaomoUH/tO5rHnHTUOIp0wA2l5xbpmy3mhqGnlucdo4N1facoXd+psWLqU54DJynKLZ2Lnie16C/1+eP5H+PwMmelL59kjnehSAeAKrNz505t27ZNQ4YM0a+//mp1HAAAUAuUjbBNpkhHDWMiP+AmMvOK9cm6A7rvnZ/VfeJSPfnZZq3cmSany1CHqGA9cW1bff+nfvrfmD56pF9LSnTgTBZOkI5sk+pFSre8dea56Gdy6TBzDMz+VdKR7dWbEUCdsWLFCg0ZMkRRUVGy2WyaP39+hR4/adIk2Ww2jR071pJs06ZNU/PmzeXn56e4uDitXLmywq8zYcIETZo0qQoSAwAAmKJKi3RWpKOmsSIdsFBmXrG+2WJuGPrDrjQVO4+vPG/fOFg3dDbHtjRvEGhhSsBDbPhA2vTR8bno9Rpe+GNDoqU210rbF0nrZkqD/1F9OQHUGbm5uerSpYvuv/9+/e53v6vQY9euXasZM2aoc+fO57xu1apVuuyyy+Tt7X3S+W3btik0NFSRkZGVyjZnzhyNHTtW06ZNU+/evfXmm29q8ODB2rJli2JiYiRJcXFxKiwsPO2x33zzjaKiorRgwQK1adNGbdq00erVqy/0UwcAADin6LCyIr3A4iSoayjSgRqWVVCsJb8d1sLNKVq588hJ5Xm7yCBz5nnnxmrZsJ6FKQEPc3iLuRpdkvo/IzW7ouLPEXe/WaRv+ki66q+St3/VZgRQ5wwePFiDBw+u8ONycnJ0zz336K233tLf//73s17ncrk0evRotW7dWrNnz5bDYf4Wzo4dO9S/f3+NGzdOTzzxRKWyvfrqqxo5cqRGjRolSZo8ebK+/vprTZ8+vXyFeUJCwjk/jzVr1mj27NmaO3eucnJyVFxcrODgYD333HNnvH7q1KmaOnWqnE7nOZ8XAADUbWWjXZLS8yxOgrqGIh2oAdkFxVq69bAW/pKiFTvSVOR0lX+sbUSQri9ded6qEeU5UGGFOeZc9JJ8qdVV0hXjK/c8rQZKIU2lzAPSb/OlrndVaUzAEgVZ0rE95pijepFSQH3JzmQ/dzd69Ghdf/31uuqqq85ZpNvtdi1atEh9+/bV8OHD9f7772vv3r0aMGCAbrzxxrOW6OdTVFSkhIQEPfXUUyedHzRoUIVWlk+aNKm8dJ81a5Z+/fXXs5bokvl5jx49WllZWQoJCalUdgAAUPsdn5FeIMMwZLPZLE6EuoIiHagmOYUlWrb1sP73S4q+33FERSXHy/PWjerp+s6NdX2nxmodEWRhSsDDGYb0v3FS2g4pKEq6eUblS0K7Q+p2n/Td381NRynS4SlKCqVje6Wju8zbsd3S0d3mcc7hk6+1e0n1IqSgSLNYDyq91YuQghpLQaV/BjSgcLfI7NmztX79eq1du/aCro+KitK3336rvn376u6779aPP/6ogQMH6o033qh0hrS0NDmdTkVERJx0PiIiQocOHar08wIAAFSFyBA/SVJ+sVPpecUKD/SxOBHqCop0oIoYhqHDWYX6ae9RLfwlRctPKc9bNgzUDZ2jdH3nxmpDeQ5UjfXvSZs/kWwO6dZ3pMD6F/d83YZJyydJB34yx8VEXFI1OYGL5XKavy1xdNfxkrzsOPOAZLjO/tjA0v0Cco9IrhIpK8m8nYvNUVqulxbrpxbtZfcDG1z4pr44rwMHDujxxx/XN998Iz8/vwt+XExMjN577z1deeWVatGihd5+++0qWZl16nNczIqvESNGXHQeAAAASfLzdqhhkK+OZBcqOSOfIh01hiIdqKC8ohLtOZKrPWm52nMkp/Q4R3uP5Cq36OSZni0aBOqGzo11fecotYmox68bAVXp0K/SV6VjCwY+K8X2vPjnDIqU2l0nbf3SXJV+3UsX/5zAhTIMKSf1hJL8hNI8fa/kLDr7Y32CpAatpPCWUv1WpbeW5s2vdESGs9h8/uxDUs4hKTtFyj5cenzCLfeIZDil7GTzpg1nf12bXQpsdHxl+6kr3cvuBzaUHLztPJ+EhASlpqYqLi6u/JzT6dSKFSs0ZcoUFRYWls9BP9Hhw4f10EMPaciQIVq7dq3GjRun119/vdI5GjRoIIfDcdrq89TU1NNWqQMAAFghKtRfR7ILdTA9Xx2jGQmHmsF3NMAZuFyGkjLyTyvL9xzJVUrm2XeFdthtatEgUNd0iNT1nRurXWQQ5TlQHQqzS+eiF0itB0m9Hq+654673yzSN82Rrnpe8gmouucGJCk/4+TxKyeW5kU5Z3+cw1cKb3G8IC8vzFuZRfX5/nvj8JZCos3buThLpNzU48X6iUV7zuHjBXxuqrkSPqf0mpRzPKfNbmYsL9rPstI9sFGdLtwHDhyozZs3n3Tu/vvvV7t27fTkk0+esURPS0vTwIED1b59e82dO1c7d+5Uv3795Ovrq5dffrlSOXx8fBQXF6clS5bo5ptvLj+/ZMkSDR06tFLPCQAAUJWahPpr04EMJWfkWx0FdUjd/U4FkJRVUGyW5KeU5XvTclVYcvZfkw8L8FaLhvXUokGg+WfDQLVsGKiY8ED5eDFTFqhWhiF9+bhZPAY3kW5+s2pnObfoL4U1k9L3Sb99Ll16b9U9N+qO4nxzk8/yVeUnlOZ5aWd/nM0uhcYcL8jDTyjNQ5rUzBgVh5cUHGXezsXlNFevlxXr2SmlRfspBXxOqrnCPedw6cz2Ted4Ultp4X5C0R4WK/X9U1V+hjUmJydHu3btKr+/d+9ebdy4UeHh4YqJidGUKVM0b948LVu2TJIUFBSkjh07nvQcgYGBql+//mnnJcnlcunaa69VbGys5syZIy8vL7Vv315Lly5V//79FR0drXHjxlUq2/jx4zVs2DDFx8erZ8+emjFjhhITE/Xwww9XxZcGAADgokSFmmPwkijSUYMo0lHrlThdOpCef1JZvvtIrvYcyVVaTuFZH+ftsCm2fuBpZXmLBvUUxvwtwDrr3pF+/czcNPG2mVJAeNU+v91ubjq67HnztSjScTbOEilj//GS/Njuk+eWn0u9yBPGr5zwZ1gzycu3RuJfNLvj+PiWc3E5pdy0s69sP7GAN5zmSvfcVOlQ6crssGYeW6SvW7dO/fv3L78/fvx4SdJ9992nWbNmKS0tTbt3767089vtdk2aNEl9+vSRj8/x9yadOnXS0qVLVb/+2feNOF+2O+64Q0ePHtULL7yglJQUdezYUYsWLVJsbGyl8wIAAFSV6FB/SWJFOmqUzTAMw+oQ55OVlaWQkBBlZmYqODjY6jhwU8dyi8rL8t2lK8v3HMlR4rE8FTvP/s+8YZBveVnesmGgWpSW5U3C/OXlYHU54FZSNkn/vVpyFkqD/i71GlM9r5OTKr3a3tyY8fcrpcadq+d14DmO7pb2fn/CyvLd5txyV8nZH+MbYs4tL19d3uJ4ae7LptOncbmkvKOnr2z39qu+/62fBe89rcXXHwAAnM83vx3SQ+8nqHOTEH3x2BVWx4EHq8h7T1akw6MUlbi0/2iuuaL8hLJ8T1quMvKKz/o4Xy+7mjcIVMvSleVlZXnzhoEK9vOuwc8AQKUVZEmf3GeW6G0GSz0fq77XqtdIaneDtGW+uenoDf+uvteC+0taL71zzZk3+/TyO3n8yomzywPqn39uOY6z26V6Dc0bAAAAcA7RYaxIR82jSIdbSs0uKC3JzaJ8d2lZfuBYnlzn+B2KqBC/8jEsJ45kiQrxl91OmQF4LMOQvhhjrgAOiZFumlb9BWX8/WaR/stc6eq/Sb71qvf14J5KCqX5j5glekQnqXkfsywPLy3Mg6OrdkY/AAAAgPMqG+2SllOkgmKn/LxrYC8h1HkU6XAr6blF+tOnm7R0a+pZrwn0cZxQlh9fYd68QaACfPgnDdRKa/9rltp27+qZi34mzfqaZemx3dKvn0pxI6r/NeF+lk+SjmwzN8AcvkAKPPvMaQAAAAA1I8TfW4E+DuUWOZWUka+WDVn4hOpH6wi3sT4xXY99uF7JmQWy26QmYQGnleUtG9ZToyBf2fhVeaDuSN4gff1n8/jqF6Qm8TXzuna7WZ4veVZaN5MivS46mCCt+o95fMO/KdEBAAAAN2Gz2RQV6q+dqTlKpkhHDaFIh+UMw9A7q/Zp0qKtKnEZatEgUNPu7aZ2kWwuBdR5+Rmlc9GLzJnllz9Ss6/f9R7p279JKRvNQj/q0pp9fVinuECa/7BkuKROt0vth1idCAAAAMAJosPMIj0pnTnpqBkM9YSlsgqK9cgH6/W3/21RicvQ9Z0ba8FjvSnRAZhz0ReMljL2S6Ex0tCpNb9xY2B9qf2N5vG6mTX72rDWdxOltB1SvQhp8D+tTgMAAADgFFGhbDiKmkWRDsv8lpypIa//oMW/HZK3w6YXhnbQlLsuVZCft9XRALiDn96Utv2vdC76LMk/1Joc8febf27+VCrIsiYDataBn6Ufp5jHQ/5TMzP5AQAAAFRI2YajBynSUUMo0lHjDMPQxz8n6uZpq7X/aJ6iQ/316cO9NLxnM2afAzAdTJC++Yt5fM1EKTrOuiyxvaUGbaTiXGnzJ9blQM0ozpfmP2KOdOlyl9R2sNWJAAAAAJxBNCvSUcMo0lGj8opK9MdPNunpzzerqMSlge0aaeEfrlCXpqFWRwPgLvLTpbkjJFexdMlQ6bKHrM1jsx3faHTdLHPkDGqvb/8uHd0lBTWWrp1kdRoAAAAAZxEdZhbpSRTpqCEU6agxu1KzNXTKKn2+IUkOu01PDW6nt4bHKzTAx+poANyFYUjzR0uZiVJYc+nG12t+LvqZdLlLcvhKhzdLSQlWp0F12f+j9ONU83jIa5J/mLV5AAAAAJxV2Yz0Q5kFcrpY8ITqR5GOGrFgY5JunLJKO1Nz1CjIVx+N6qGHr2wpu90NCjIA7uPHqdL2hZLDx5yL7hdidSJTQLjU4WbzmE1Ha6eiPGnBo5IMqeu9UptBVicCAAAAcA4RQb5y2G0qdho6kl1odRzUARTpqFYFxU79ed5mPT57o/KKnOrdqr4WPd5HPVrUtzoaAHdzYK209K/m8bWTpKiulsY5Tdmmo79+JuVnWBoF1WDZC9KxPVJwtDmXHwAAAIBb83LYFRnsJ4nxLqgZFOmoNolH83TrG6v10U+JstmkPwxsrfce6KEG9XytjgbA3eQdK52LXiJ1uEWKH2l1otM17SE1bC+V5Eu/sOlorbJvlfTTdPP4xtck/1BL4wAAAAC4MGUbjlKkoyZQpKNaLP71kK5/faV+TcpSeKCP3r3/Mo2/uo0cjHIBcCqXS5r/iJR1UApvKQ35j3vMRT+VzXZ8VXrCTDYdrS2KcktHukjqNlxqdZW1eQAAAABcsKhQc0V6MkU6agBFOqpUsdOlv/9vix7+IEHZBSWKiw3Twj9cob5tGlodDYC7+vF1acdiczPP22ZJfsFWJzq7zndIXv5S6hbpwM9Wp0FVWPp/Uvo+KbiJNIiRLgAAAIAniQ4rXZGeTpGO6keRjiqTnJGvO978Uf/9Ya8k6cE+zTX7ocvVOMTf4mQA3FbiGmnp8+bx4H9KjTtbm+d8/EOljreYx+vesTQKqsDeFdLPM8zjoa+79w9xAAAAAJwmqnS0CyvSURMo0lElvt9xRNe/tlLrEzMU5OelGcPi9Mz1l8jbwT8xAGeRe1Sae79kOKVOt0lxI6xOdGHiSse7/DbPnO0Oz1SYIy0YbR7H3S+1HGBtHgAAAAAVxox01CRaTlwUp8vQq99s14iZPys9r1gdo4O1cEwfDeoQaXU0AO7M5ZLmPSRlJ0v1W0s3THbPuehn0iReiugoOQulTbOtToPKWvKclJEohcRIg/5mdRoAAAAAlUCRjppEkY5KO5JdqGFv/6TXvt0lw5DuvTxGnz7cSzH1A6yOBsDdrZos7VoqefmZc9F961md6MKx6ajn27NcWve2eTx0iuQbZGkcAAAAAJVTNiM9u6BEWQXFFqdBbUeRjkr5ac9RXf/aSq3efVQBPg79586u+vtNneTn7bA6GgB3t3+19O3fzePrXpIiO1qbpzI63S55B0ppO8zPB56jIEta8Jh53H2U1OJKa/MAAAAAqLQAHy+FBXhLYk46qh9FOirE5TI0bfku3fXWGqVmF6pNRD198VhvDe0abXU0AJ4g54j06QPmXPTOd0qXDrM6UeX4BUudfmceJ8y0NgsqZsmzUuYBKTRWuup5q9MAAAAAuEhlG44mpVOko3pRpOOCZeQV6cH31ulfi7fLZUi3dIvW/NG91aoRvxIP4AKUz0VPkRq0lW541XPmop9J2aajWxaYG6fC/e1aJiXMMo+HTvWskUIAAAAAzqhsTjor0lHdKNJxQTYeyND1r/2gZdtS5eNl1z9u6aRXbuuiAB8vq6MB8BQrX5F2fyt5B0i3vyv5BFqd6OJEd5Mad5GcRdKmj6xOg/MpyJS++IN5fNnvpeZ9rM0DAAAAoEqUrUg/SJGOakaRjnMyDEOzVu3VbW+sVlJGvprVD9C8R3vpzstiZPPklaQAatbeFdLyF83j61+RGrW3Nk9VKVuVvo5NR93e189IWQelsObSVX+1Og0AAACAKtIkrGxFeoHFSVDbUaTjrLILivXYRxv0f19uUbHT0OCOkfpizBXqEBVidTQAniQnVfpslGS4pK73SF3vtjpR1el0q+RTTzq22/xhAdzTziXShvcl2aSbpnn+b0MAAAAAKHd8RnqexUlQ21Gk44y2pmTpximrtHBzirzsNj13wyWadk83Bft5Wx0NgCdxOc0SPeew1LC9dN3LVieqWr5BUqfbzGM2HXVP+RnSF2PM48sfkWJ7WRoHAAAAQNU6PiOdFemoXhTpOM0naw/opqmrtDctV1Ehfvrk4Z564IrmjHIBUHErXpL2fi95B5bORQ+wOlHViy8d77L1f1LOEWuz4HRf/9nc4Da8pTTgWavTAAAAAKhiZSvSD2cXqKjEZXEa1GYU6SiXX+TUhLmb9MRnv6iwxKV+bRtq4R/6qFtMmNXRAHiiPcul5f8wj2/4t9SwraVxqk3jLlJ0nOQqljZ+YHUanGj7YmnjhzJHukyvnT/IAQAAAOq4BvV85ONll2FIh7NYlY7qQ5EOSdLuIzm6aeoqfZpwUHab9Kdr2uqd+7orLNDH6mhA7fbDZGn2PdL3L0m7v5MKMq1OVDWyD5kjXWRI3YZLXe6wOlH1Ktt0NGGW5GIFhFvIT5e+fNw87jlaiulhbR4AAAAA1cJms5WPdzmYnm9xGtRmXlYHgPW+3JSspz77RblFTjWo56vX77pUPVvWtzoWUPutf09a+lfzeNv/Sk/apAZtpCbdpSZxUnS81OgSyeFB/3ftLDFL9NwjUqMO0uB/WZ2o+nW8xRwhkr5P2rtcajnA6kT46ikp55BUv7U04C9WpwEAAABQjaJD/bU3LVfJGRTpqD4e1MygqhWWOPX3/23V+2v2S5IubxGu1+66VI2C/CxOBtQBBxOkhX80jzvfYW7KeXCtlLFfSttu3srGhHgHSFGXmuNDmsSb5XpItHXZz+f7f0r7Vko+9cy56N7+Vieqfj6B5t/j2rekdTMp0q22baH0y2zJZjdHutSFf4MAAABAHRYVanZZSRTpqEYU6XXUgWN5Gv3Rev1y0Bwj8Vj/Vhp7VWt5OZj2A1S7nCPSJ8MkZ5HU9nrppjcku/34x5ISzFI9aZ2UtF4qzJL2rzJvZYKijq9YbxJvFu0+gdZ8PifatczcYFSShvxHatDa2jw1Kf5+s0jfttAcbRMUaXWiuinvmPTlWPO41xipaXdL4wAAAACoftGh5n5IrEhHdaJIr4OWbDmsP36yUVkFJQoN8Na/7+iq/m0bWR0LqBucxdLcEVJWkjly4uYTSnRJqtdQanuteZPMedtHd5rF+sF1Zrl+eIuUnSxtTZa2fmleZ3OYI2DKy/Xu5ogYew3+cCwrRfr8IUmGOTO8060199ruIKKD1OQy6eDP0ob3pb5/sjpR3fTVE1JuqtSgrdTvz1anAQAAAFADWJGOmkCRXocUO116+evtenPFHknSpTGhmnJ3t/INGQDUgG+elfb/IPkESXd+JPkFn/t6u11q2Na8XXqvea4oV0reaJbqB9eZK9izkqTDm81bwizzOt9gc6V6k9JiPTreLOqrg7NE+vQBKS9NiuwkXfuP6nkddxf/gFmkJ7wnXTFesjusTlS3bPlC2jzX/MHSzdMlb0aVAQAAAHVBdJjZbVGkozpRpNcRhzILNObj9Vq7L12S9EDv5npqcDv5eDHKBagxm+ZIP003j29+Q2rYpnLP4xMoNett3spkJR9fsX4wQUouHQmz93vzViY05viK9SbxUmTnqikbv5soJa42f0Bw27t1t8DscJO0+CkpM1Ha/a3U+mqrE9UduUelhePN496Pm3sKAAAAAKgTyhaJJmfkyzAM2Ww2ixOhNqJIrwNW7jyisbM36mhukYJ8vfSvWztrcKfGVscC6paUTdKXj5vHfSZI7W+o2ucPjpIuudG8SeYK8SNbzXK9rGA/sl3KSDRvv31uXmf3NleQl21i2iReCm8hVeRNx84l0g+vmsc3vibVb1m1n5sn8faXutxl/sBk3UyK9Jq0aIKUe0Rq2F7q95TVaQAAAADUoMgQP9lsUkGxS8dyi1S/nq/VkVALVapInzZtml566SWlpKSoQ4cOmjx5svr06XPGa5cvX67+/fufdn7r1q1q165dZV4eF8jpMvTasp167dudMgzpksbBmnZPNzVr4AYbEgJ1Sd4xac69Ukm+1OpqqX8NzG12eJkFeWQncxNMSSrIlJI3lM5bTzDL9dwj5ur15PWSZpjX+Yebq3nLyvXoblJA+JlfJzOpdC66pO6jpI63VPun5vbi7zeL9B2Lzd8UCI6yOlHt99s884dDZSNdvHjTDAAAANQlvl4ONaznq9TsQiVl5FOko1pUuEifM2eOxo4dq2nTpql379568803NXjwYG3ZskUxMTFnfdz27dsVHHx8FnDDhtU0pxeSpKM5hXp89kb9sCtNknTXZU311yEd5OfNvF6gRrmc5uzwjEQprLn0u7esm5vtFyK16GfeJMkwzFwH15pz1g+uM1fO5x+Tdi0xb2Xqtzq+Yr1JvBTR0Tz/6QPm9Y27SNe8WNOfkXtq2FaK6WWOuln/vtTvSasT1W45R6SFfzSP+4w39wUAAAAAUOdEh/krNbtQyRn56twk1Oo4qIUqXKS/+uqrGjlypEaNGiVJmjx5sr7++mtNnz5dkyZNOuvjGjVqpNDQ0EoHxYUzDEOPfrheP+09Jn9vhybe3FG3dGtidSygblr2grTnO8k7QLrzQ8k/zOpEx9lsUliseet0q3mupMjcsLRsxfrBtdKxPdLRXebtl9nmdV5+UkgT85xvsHTbLFYBnyj+/tIi/V2pzx/N3xBA1TMMcy563lHzhzt9n7A6EQAAAACLRIX6a0Nihg6ms+EoqkeFvrMvKipSQkKCnnrq5NmjgwYN0urVq8/52EsvvVQFBQW65JJL9Je//OWM417KFBYWqrCwsPx+VlZWRWLWeV//dlg/7T0mXy+75o3upXaRwed/EICq99s8adVk83joFCmig6VxLoiXjznWJTpOUunIlrxjx1esl61eL8gwS3TJ/NzCW1iV2D21v1Hyf1LKSjJX9rcdbHWi2um3z6WtX0h2L+mmaea/XwAAAAB1UpPyDUcLLE6C2qpCRXpaWpqcTqciIiJOOh8REaFDhw6d8TGNGzfWjBkzFBcXp8LCQr3//vsaOHCgli9frr59+57xMZMmTdLzzz9fkWgoVVTi0j++2ipJerBPC0p0wCqHt0jzR5vHvcZIHX9nbZ6LERBubppZtnGmYUhHd5sr1v3DpTaDrM3njrz9pK53Sz9OMTcdpUivetmHTxjpMsEcLwQAAACgzooqLdKTMvIsToLaqlK/a26z2U66bxjGaefKtG3bVm3bti2/37NnTx04cEAvv/zyWYv0p59+WuPHjy+/n5WVpaZNm1Ymap3z/pr92nc0Tw3q+erhfi2tjgPUTfkZ0px7pOJcqfmV0sD/szpR1bLZpAatzBvOLm6EWaTvWiJlHJBC+e9YlSkb6ZKfbm6o2+ePVicCAAAAYLFoVqSjmtkrcnGDBg3kcDhOW32empp62ir1c7n88su1c+fOs37c19dXwcHBJ91wfhl5RXptmfl1/eOgNqrny0xeoMa5XNLnD5lzxUOaSrfOZD52XdWgtdSsj2S4pPXvWZ2mdtn8qbTtf5LdW7ppOiNdAAAAAJywIp0Z6ageFSrSfXx8FBcXpyVLlpx0fsmSJerVq9cFP8+GDRvUuHHjirw0LsBry3YpM79Y7SKDdHs8Kx8BS3z/D2nn1+ZmnHd8IAXWtzoRrBR/v/nnhvclZ4m1WWqL7EPSognm8ZVPmCvSAQAAANR50WFmkX4st0j5RU6L06A2qvAyyfHjx2vYsGGKj49Xz549NWPGDCUmJurhhx+WZI5lSUpK0nvvmavvJk+erGbNmqlDhw4qKirSBx98oM8++0yfffZZ1X4mddzetFy99+M+SdIz17eXw37mUTsAqtG2RdL3/zSPb5gsRXW1Mg3cQbshUkADKTtF2rFYan+D1Yk8m2FIX441N7tt3EW6YpzViQAAAAC4iWA/L9Xz9VJOYYmSMvLVqlE9qyOhlqlwkX7HHXfo6NGjeuGFF5SSkqKOHTtq0aJFio2NlSSlpKQoMTGx/PqioiJNmDBBSUlJ8vf3V4cOHbRw4UJdd911VfdZQP/4aqtKXIb6tW2oPq0bWh0HqHvSdkrzfm8eX/aQ1PUua/PAPXj5SJfeI636j5QwkyL9Yv0yR9rxVelIlzckh7fViQAAAAC4CZvNpuhQf20/nK1kinRUA5thGIbVIc4nKytLISEhyszMZF76GazZc1R3zlgjh92mxY/3UeuIIKsjAXVLYbb01kApbbsU00u67wsKPhx3dLf0ejdJNunxjVJYM4sDeaisZGna5VJBpjTgWanvBKsToRbjvae1+PoDAIDKun/mz/pu+xFNuqWT7rosxuo48AAVee9ZoRnpcD8ul6G/L9wiSbqze1NKdKCmGYY0/xGzRA9qLN02ixIdJ6vfUmrRT5IhJbxrdRrPZBjSl4+bJXrUpVLvsVYnAgAAAOCGyuakJ7PhKKoBRbqHm78xSb8mZamer5fGXd3G6jhA3fPDq9LWL81RE7e/LwVFWJ0I7iiubNPRDyRnsbVZPNHGj6Sd30gOn9KRLhWeTAcAAACgDogKNYv0pHSKdFQ9inQPll/k1L8Wb5ckPdq/pRrU87U4EVDH7FwqLfubeXzdS1LT7tbmgftqd71UL0LKTZW2LbQ6jWfJTJIWP2Ue939GatTO2jwAAAAA3FZ0WZHOinRUA4p0D/bflXt0KKtA0aH+eqB3c6vjAHXLsb3SZyMlGVK3+6T4+61OBHfm8JYuvdc8TphpbRZPYhjSF2OkwiwpOl7qNcbqRAAAAADcGEU6qhNFuodKzSrQ9O93S5KeHNxOft4OixMBdUhRrjTnXqkgwyz3rnvJ6kTwBN3uk2ST9iw3NyDF+W14X9q9THL4SjdNl+z8tw4AAADA2ZXNSD+UWSCny7A4DWobinQP9eqSHcorcqpr01AN6dzY6jhA3WEY0hd/kA7/KgU2lG5/T/JirBIuQFis1GqgebyeTUfPK+OAtPjP5vHAZ6WG7AMCAAAA4NwaBfnJy25TictQanaB1XFQy1Cke6CtKVmas+6AJOnZG9rLZrNZnAioQ9ZMk379VLJ7Sbe9K4VEW50InqR809EPpZIia7O4M8OQvnhMKsqWmvaQLn/U6kQAAAAAPIDDblNkiJ8kKZnxLqhiFOkexjAMTVy4VYYhXd+pseJiw62OBNQde1dI3zxrHl/zotSst7V54HnaXCsFNZby0qRtX1qdxn0lzDRH4Hj5SUOnMdIFAAAAwAWLKp2TfjCdIh1ViyLdwyzffkQ/7EqTj8OuJ69tZ3UcoO7IOCDNHSEZTqnzndJlD1mdCJ7I4SVdOsw8Xsemo2eUvv/4D6wG/lVq0MraPAAAAAA8ShM2HEU1oUj3ICVOlyYu2ipJGtG7mWLqB1icCKgjivPNzUXzjkqRnaUhkyVGKqGyug2XbHZp30opbafVadyLy1U60iVHiukp9XjY6kQAAAAAPEzZinRGu6CqUaR7kI/XHtCu1ByFBXhrdH9W6AE1wjCkhX+UUjZK/uHSHR9I3v5Wp4InC20qtR5kHifMsjSK21n3tjlCyctfGjpVsvM2BQAAAEDFRIeVrkhntAuqGN+heoisgmL9e8kOSdLYq9ooxN/b4kRAHbH2v9LGD80VxLe+I4XFWp0ItUHZpqMbP5SK2UleknRsr7Tkr+bx1c9L9VtamwcAAACARzq+Ip3vtVC1KNI9xLTvdutYbpFaNAzU3T1irI4D1A2Ja6TFT5nHV/2f1LK/pXFQi7S+WgpuIuWnS1u/sDqN9VwuacFjUnGuFHuF1P1BqxMBAAAA8FDRJ8xINwzD4jSoTSjSPcCBY3l654e9kqRnrmsvbwd/bUC1y0qRPhkuuUqkDjdLvf5gdSLUJnaHOStdYtNRSVr7lrT/B8k7UBo6hZEuAAAAACotKtRPkpRTWKKsghKL06A24TtVD/Cvr7eryOlSr5b1NaBdI6vjALVfSZFZoucclhpdIt04hc1FUfW6DZNsDilxtZS6zeo01jm6W1r6f+bx1c9L4c0tjQMAAADAswX4eCk80EcSc9JRtSjS3dz6xHR9uSlZNpv0zPXtZaPMA6rf4ielgz9LfiHm5qK+9axOhNooOEpqc615XFc3HXW5pAWjpeI8qVkfKX6k1YkAAAAA1AJlq9KTMyjSUXUo0t2YYRj6+/+2SJJu7dZEHaJCLE4E1AHr35fWvSPJJt3yXzY8RPWKL910dNNHUnEdfIP30xtS4o+STz1p6FRGugAAAACoEifOSQeqCt+xurGFm1O0PjFD/t4OTbimrdVxgNrvYIK0cLx53P8Zqc0ga/Og9ms5QAqJkQoypd/mWZ2mZqXtkpa9YB4P+psUFmttHgAAAAC1RlRpkc6KdFQlinQ3VVDs1D++Mmfm/v7KFooI9rM4EVDL5RyRPhkmOYukttdLff5odSLUBXaHFHefeVyXNh11OaUFj0ol+VKLflLc/VYnAgAAAFCLlK1IP0iRjipEke6m3l29TwfT8xUR7KuH+rawOg5QuzmLpbkjpKwkqX5r6eY3GDGBmnPpMMnuZc7lP/yb1Wlqxppp0oGfJJ8g6cbX2cwXAAAAQJWKZkU6qgFNkRs6mlOoKd/ukiT96Zp2CvDxsjgRUMsteU7a/4M5p/nODyW/YKsToS4JipDaXmce14VV6Ud2SN/+3Ty+ZqIUGmNtHgAAAAC1TnRY6Yz0dIp0VB2KdDf0n2U7lV1Yog5Rwbrl0mir4wC126Y55upYyVyJ3pD9CGCBsk1Hf5kjFeVam6U6uZzS/EekkgKp5UCp23CrEwEAAACohcpmpKdmF6qwxGlxGtQWFOluZldqtj78KVGS9Mz17WW38+vuQLVJ+UX68nHzuM8Eqf0Qa/Og7mreTwprJhVmSb9+bnGYarT6dSlpneQbLN34GiNdAAAAAFSL+oE+8vUya89DmQUWp0FtQZHuZiYt2iany9BV7SPUq2UDq+MAtVfeMWnOPeZmh62ukvr/2epEqMvsdiluhHmcUAvHuyStlz6+S1r6V/P+tZOkkCbWZgIAAABQa9lstvI56UnMSUcVoUh3I6t2pWnZtlR52W16+rp2VscBai+XU/r0ASkj0VwF/Lv/SnaH1alQ13W9V7J7S0kJUsomq9NUjcQ10ge/k97qL21fJMkmdX9Q6nqP1ckAAAAA1HLMSUdVo0h3E06Xob8v3CpJuvfyWLVsWM/iREAttuwFac93kneAdMeHkn+Y1YkAqV5Dqf0N5rEnbzpqGNLeFdKsG6R3rpF2LZVsDqnLXdLon6XrX2akCwAAAIBqFxViFunJGYx2QdXwsjoATJ8lHNTWlCwF+3np8YGtrY4D1F6/zZdWTTaPb3xdiuxoZRrgZPEPSL/NkzbPlQb9TfINsjrRhTMMadcyacVL0oE15jm7t9T1LumKcVJ4C2vzAQAAAKhTylekZ+RZnAS1BSvS3UBuYYle+ma7JOkPA1srLNDH4kRALZW6VZr/qHnc8zGp063W5gFO1ayPVL+VVJQjbf7U6jQXxjCkbYuktwZIH/7OLNEdvlL3UdIfNpg/sKJEB+q0vLw8xcbGasKECVZHAQAAdUhUKCvSUbVYke4G3lyxR0eyCxUTHqBhPWOtjgPUTvkZ0uy7peJcqXlf6arnrU4EnM5mMzcd/eYv5qaj8fdbnejsXC5p6wJpxSvS4c3mOS9/c1V9rzFScGNr8wFwGxMnTlSPHj2sjgEAAOoYNhtFVWNFusVSMvM1Y8VuSdLTg9vJ14sND4Eq53JJ834vHdsjhTSVbp0lOfg5ItxUl7slh4+54WjSeqvTnM5ZIv3yiTTtcmnuCLNE96lnjm8Zu1m69kVKdADldu7cqW3btum6666zOgoAAKhjTizSDcOwOA1qA4p0i7389Q4VFLvUvVmYru0YaXUcoHb6/p/SjsXmuIk73pcC61udCDi7wPrSJUPN4wQ32nTUWSxt+ECa2l36/EEpbbvkGyJd+aRZoF/1f+aGqQBOsmLFCg0ZMkRRUVGy2WyaP3/+Oa+fNGmSunfvrqCgIDVq1Eg33XSTtm/fblmuadOmqXnz5vLz81NcXJxWrlxZodeZMGGCJk2aVAWJAQAAKiYyxE82m1RU4lJaTpHVcVALUKRb6NekTH22/qAk6ZnrL5HNZrM4EVALbVskff8P83jIZCnqUkvjABckrnSky+bPpIJMa7OUFEpr35Ze6yYtGG3+Zod/uDTgL9K4zVL/P0sB4dZmBNxYbm6uunTpoilTplzQ9d9//71Gjx6tNWvWaMmSJSopKdGgQYOUm5t71sesWrVKxcXFp53ftm2bDh06VOlcc+bM0dixY/XMM89ow4YN6tOnjwYPHqzExMTya+Li4tSxY8fTbsnJyVqwYIHatGmjNm3aXNDnDgAAUJV8vOxqFOQrSUpmvAuqALMNLGIYhv6+cIskaWjXKHVtGmptIKA2SttpjnSRpMsekrrebW0e4ELF9pIatDVXff/yiXTZgzWfoShPWv+etOo/UnayeS6wkTn/PP4BybdezWcCPNDgwYM1ePDgC75+8eLFJ92fOXOmGjVqpISEBPXt2/e0610ul0aPHq3WrVtr9uzZcjjMMYE7duxQ//79NW7cOD3xxBOVyvXqq69q5MiRGjVqlCRp8uTJ+vrrrzV9+vTyVeYJCQlnffyaNWs0e/ZszZ07Vzk5OSouLlZwcLCee+65M14/depUTZ06VU6n85y5AAAALlR0qL8OZxUqKSNfXejecJFYkW6RJVsOa82eY/L1suuJa9tZHQeofQqzpdn3SIVZUkxP6ZoXrU4EXLiyTUclKWGWVJPz/ApzzPL8P52lxU+aJXpQlHTtP6Wxv0i9/0CJDtSgzEzzt1LCw8/8mx92u12LFi3Shg0bNHz4cLlcLu3evVsDBgzQjTfeeMYS/UIUFRUpISFBgwYNOun8oEGDtHr16gt6jkmTJunAgQPat2+fXn75ZT344INnLdElafTo0dqyZYvWrl1bqcwAAACniiqdk86KdFQFVqRboKjEpUlfbZMkjbyiefnmBwCqiGFI8x8xV/MGNZZue1dyeFudCqiYLndKy56XDv8qHVwnNe1eva9XkCn9PEP6cZqUf8w8FxIj9Rkndb1H8vKt3tcHcBrDMDR+/HhdccUV6tix41mvi4qK0rfffqu+ffvq7rvv1o8//qiBAwfqjTfeqPRrp6Wlyel0KiIi4qTzERERZx0XAwAA4G6iw8zO7WA6RTouHkW6BT78ab/2puWqQT0fPdKvpdVxgNrnh1elrV9Kdm/p9veloIjzPwZwNwHhUoebpU0fm5uOVleRnndMWjNd+ulNqbB0Hnt4C6nPH6XOd/BDKMBCjz32mH755Rf98MMP5702JiZG7733nq688kq1aNFCb7/9dpXsv3PqcxiGUannHTFixEVnAQAAqKhoVqSjCjHapYZl5hXrP8t2SpLGX91WQX4UFECV2rVUWvY38/i6l6p/FS9Qnco2Hf31cyk/o2qfO+eItOSv0uRO0op/mSV6w3bSLf+VRq+VLr2XEh2w0JgxY/TFF1/ou+++U5MmTc57/eHDh/XQQw9pyJAhysvL07hx4y7q9Rs0aCCHw3Ha6vPU1NTTVqkDAAC4q7IiPYkiHVWAFek17PVvdyojr1htIurp9vjzf1MEoAKO7ZU+HSnJkLoNl+LvtzoRcHGaXiY1ukRK3SL9Mkfq8fuLf86sFGn1a9K6mVJJ6ZvJiE5S3wlS+xslOz9jB6xkGIbGjBmjefPmafny5WrevPl5H5OWlqaBAweqffv2mjt3rnbu3Kl+/frJ19dXL7/8cqVy+Pj4KC4uTkuWLNHNN99cfn7JkiUaOnRopZ4TAACgpjEjHVWJIr0G7UvL1bs/7pMkPXP9JfJyUFYAVaYoV5pzr1SQIUXHSddVrjgA3IrNZq5K/+pPZvF92UPmucrIOCCtmiytf19yFprnorpJVz4htbm28s8L4JxycnK0a9eu8vt79+7Vxo0bFR4erpiYGE2ZMkXz5s3TsmXLJJkbbn700UdasGCBgoKCyleEh4SEyN//9H11XC6Xrr32WsXGxmrOnDny8vJS+/bttXTpUvXv31/R0dFnXJ1+vlySNH78eA0bNkzx8fHq2bOnZsyYocTERD388MNV+jUCAACoLmUz0tPzipVXVKIAH6pQVB7/emrQPxdvU7HTUN82DXVlm4ZWxwFqD8OQvviDuSljYENzLjobI6K26Hy7tOQ56chW6cBPUszlFXv8sT3SD/+WNn4suYrNc00vl678k9RyIAU6UM3WrVun/v37l98fP368JOm+++7TrFmzlJaWpt27d5d/fPr06ZKkfv36nfQ8M2fOPOOccbvdrkmTJqlPnz7y8fEpP9+pUyctXbpU9evXr1QuSbrjjjt09OhRvfDCC0pJSVHHjh21aNEixcbGXvgXAAAAwELBft4K8vVSdmGJkjPy1apRkNWR4MFshmEYVoc4n6ysLIWEhCgzM1PBwcFWx6mUn/ce0+1v/ii7Tfrq8b5qG8n/cIGLlndMSlovbfufuRmj3Usa/oXUrLfVyYCqNX+0tPEDc/PPW2Zc2GOO7JBWviJtnisZTvNc875S3yekZldQoAPnUBvee3oyvv4AAKAqXTt5hbYdytas+7urX9tGVseBm6nIe09WpNcAl8vQxIVbJEl3dI+hRAcqw1lirsg9uFY6sNb88+jOk68ZNJESHbVT/P1mkf7bfOnaf0gB4We/9vBv0oqXzGtV+rPyVleZBXpMjxoICwAAAADuIyrUX9sOZSs5o8DqKPBwFOk14ItNydp0MFOBPg6Nv7qN1XEAz5CTKh1cJx382fwzab1UnHv6dfVbSU26S60HSR1uPv3jQG0QHSdFdpIObZY2fSz1HH36NckbpBUvm7+hUabt9eYmotHdai4rAAAAALiR6NINR5My8ixOAk9HkV7NCoqd+tfibZKkR/u3UsMg5jYDpykpkg5vNgvzAz+bq80z9p9+nW+wWSg26V56iz/3ylygtijbdHTheHPT0csfPT6a5cDP5gr0nd+UXSxdMlTq+ycpsqNlkQEAAADAHZRtOMqKdFwsivRq9vYPe5WcWaDoUH+NvKK51XEA95CZZJblZbfkjZKz8JSLbFKj9mZZXlacN2gj2R1WJAas1+k26ZtnzZFG+1eZ577/l7T3e/PYZjev6fNHqWFb63ICAAAAgBuJKluRnp5vcRJ4Oor0apSaXaBp3+2SJD1xbVv5eVMAog4qzpdSNpXONi8d05KdfPp1/uEnrzSP7ib5hdR8XsBd+QVLnW6V1r8rfXy3VJhpnrd7SV3ulK4YL9VvaW1GAAAAAHAzx0e7UKTj4lCkV6N/L9mp3CKnujQJ0ZDOUVbHAaqfYUjp+0pnm68155sf2iy5Sk6+zuaQIjpITS87Xp6Htzg+qgLAmcXfbxbphZmSw0e6dJjU+3EpLNbqZAAAAADglsqK9ENZBSpxuuTlsFucCJ6KIr2abD+UrTlrEyVJf7nhEtntFISohQpzpOT1pavNS8e05KWdfl1go5NL86iukk9gjccFPF7UpdI1k8z/nXUfJQXzQ1oAAAAAOJdGQb7ydthU7DSUml1YPuoFqCiK9GoycdFWuQxpcMdIdW/GZoioBVwu6eiuk2ebp26RDNfJ19m9pcZdzMK8aWlxHtKU1eZAVen5qNUJAAAAAMBj2O02RYb46cCxfCVl5FOko9Io0qvB8u2pWrHjiLwdNj01uJ3VcWqGYUgup2Q4zTEertI/Ddcp952lx6dee8p9/zCpcWerP6u6LT9dSko4YUzLOqkg4/TrQpqWbghauuI8spPk7VfjcQEAAAAAAM4kOtRfB47lK5k56bgIFOlVrMTp0ouLtkqSRvRqptj6Fo2v2PeDtPEjqaTgHKW265SCu8RcdXzS/RNL7jOU4WX3T12VXBXu+FBqf0PVPy/OLD9D+m1eaXH+s5S24/RrvPzN0RJN4s1RLdHxUnDjGo8KAAAAAABwocpWoR9Mp0hH5VGkV7E56w5ox+EchQZ467H+ra0JkTBL+t94s+B2Bza7ZPcyN5i0l95sDvOcvfTPsmvsDqk4X8o8IC15Vmo9SPLysfozqP2cxdLMweaolhOFtzg+17xJd3ODUIe3NRkBAAAAAAAqoUlpkc6KdFwMivQqlF1QrFe/MVfxjh3YWiEBNVw4ulzSty9IP/zbvH/JUCmm58kFdnmh7SXZ7afcd5xcaJ9afp/1sWcow0/8WEVnYxdmS691k47tkda9I13+cNV/rXCydTPNEt0/TIofWVqcx0uBDaxOBgAAAAAAcFHKVqQnUaTjIlCkV6Hpy3fraG6RWjQI1D2Xx9bsixcXSPMfkX773Lx/5VNSv6c8c4NH3yCp/5+l/42Vvv+H1OVOyT/U6lS1V36GtHySeTzgWan7SEvjAAAAAAAAVKXoMFak4+LZrQ5QWxxMz9N/f9grSXr6uvbydtTglzb3qPTeULNEt3tJN02X+j/tmSV6mUuHSQ3bmRte/vCq1Wlqt5UvS/nHzK93t/usTgMAAAAAAFClylekp+fLMAyL08BTUaRXkZe+3q6iEpcubxGuq9o3qrkXPrpbevsq6cAayTdEuvdzqevdNff61cXhJV39gnm85g0pfb+1eWqrY3uln940j6/+m/l1BwAAAAAAqEWiS4v03CKnsvJLLE4DT0WRXgU2HsjQgo3Jstmkv1x/iWw1tRI8cY3036vMWeIhMdLIb6QWV9bMa9eE1oOk5n3/v707j66yOvc4/j1JIAEkYRIwYRCcoEIVobUIipTBotXbVetQKji2eosKUq2oCIoCalsc6oVKbbWtY73XWmu1EJVJKYog1hFREWQSUUiYEkLy3j9eQBEISUjOzvD9rJW19jnJefePbQKPz9nZLxQXwou3hE5TOz1/ExRvg4594YgBodNIkiRJkiRVuox6qTRvVB+AFRu2BE6jmspG+gGKoohbn3kHgDOPa0OXnKzkTPzW/8GfzoiP5MjuBpc8Dy07JWfuZEkkYOCtQALefAJWLgydqHZZ/gq88xSwY51r8lFAkiRJkiRJpfjynPSCwElUU9lIP0DPvbWG15atp0G9VK4eeFTVTxhF8NKd8L8XxTu1jzoNLvgnNG5V9XOHcMgx8c1GAabfGP/5deCiCKZdH4+PGwKtu4TNI0mSJEmSVIWys3aek+6OdFWMjfQDULi9mInPvQvAz07qSOusjKqdsLgI/jE8Po4D4Ds/h3P+AvUbVe28oX13NKRlwLKXYPFzodPUDm/9H6x8Deo1gr6jQ6eRJEmSJEmqUrt2pOe5I10VYyP9APx57jI++WIrLRunc2mfjlU7WUE+PHIOLPwTJFJg0B3wvYmQklq181YHWW3iNw0AcsfEbyio4ooK4Pmb43HvEbX3txkkSZIkSZJ2yG6yc0f61sBJVFPZSK+gLzZv454XlwBw9SlH0bB+WtVNlrcC/vg9+PAFqNcQznkYjr+06uarjnpfBQ1bwOdLYMGDodPUbK9Mgbzl0Dgbel4eOo0kSZIkSVKVy9nZSN9gI10VYyO9gu55YQkbC7bT+ZBMzjyuTdVNtPo/cH9/WPs2NGoZn4fe6dSqm6+6ysiEk0fF45m3xTv0VX6bPoM5k+JxvzFQv2HYPJIkSZIkSUlgI10HykZ6BXz42SYemrcMgNGndSY1JVE1E70/HR4YBBtXw8Gd4acvQM5xVTNXTdD9Amh+OGxZBy/fFTpNzTRzIhTmxzdx/eY5odNIkiRJkiQlxc4z0j/bWEhBUXHgNKqJbKRXwMRn32N7SUS/Ti3pdXiLqplk/v3w6DmwbRN06AMX/QuatKuauWqK1HowYFw8/vf/xEfeqOw+W/zlsTinTIAUf/wlSZIkSVLd0LRhPTLqxb2QNd5wVBVgJ62c5n64juff/ZTUlATXndq58icoKYHpo+Gfv4CoBI79Cfzkf6FBk8qfqyY66lRo3wu2F8CLt4ZOU7NMvxGiYjjqNDi0d+g0kiRJkiRJSZNIJDzeRQfERno5FJdE3PrMuwCcd3w7Dm95UOVOULQVnjgf5v42ftx3NPzX/0Ba/cqdpyZLJGDgLfH4jcdg9Rth89QUH86AJdMgJe3LXf2SJEmSJEl1SLaNdB0AG+nl8OTCFbyzOp/GGWkM739k5V588zr40+nw7tOQWh9++Hvoc03cONbucrpD17OAKN69H0WhE1VvJcXxOgF86xJocXjYPJIkSZIkSQG02XFO+sr1NtJVfjbSy2jLtu38atpiAK747uE0a1SJu8TXLYH7+8GK+ZDRBIb8Db55duVdvzb67o3xGw5LZ8OS3NBpqrdFD8Onb0FGFvS5NnQaSZIkSZKkILKz4kb6KnekqwJspJfR1NkfsXZjIW2bNeD8Ew6tvAt//DLc3x/WfwxN2sMlz3t+dVk0bQ/HXxaPc2+E4u1h81RXhZu+PEv+pF9Cw2Zh80iSJEmSJAWS09SjXVRxNtLL4NP8Au6b9REAo77XmfS01Mq58H+egL/8AAo2QE4PuOQFaHFE5Vy7LjjxF9CgKXz2Hrz+l9Bpqqe598CmT6HpofDtn4ZOI0mSJEmSFMzOM9Ldka6KsJFeBr+etpitRcV0b9+UU7u2PvALRhHM+hU8eQkUb4POZ8AFz8BBBx/4teuSBk2gz6h4PGNCvPtaX8pbCS/fE48HjIO09LB5JEmSJEmSAsrZ1UgvoKTEe+6pfGyk78fbq/L434UrALjhtM4kDvTmn8VF8PfLYcaO4zZOuALO+hPUa3CASeuoHhdBs46weW28+1pfevFW2L4V2vWM36yRJEmSJEmqw1pnZZCSgG3FJazbXBg6jmoYG+mliKKI8f98lyiCM47J5rh2TQ/sggV58PCPYNFDkEiBU38NA2+FFP8zVFhafeh/Uzx++R7IXxU0TrWxahG88Wg8HjgeDvQNIEmSJEmSpBquXmoKrTIzAFi53uNdVD52cEvxwrtrmfvh59RPS+GX3zvqwC62YTn84RT4aCbUawQ/fswzqytL5zOg7fHx7usZ40OnCS+KYPpoIIKuZ0Gb7qETSZIkSZIkVQvZXzneRSoPG+n7EEURd0x7D4CLe3egTdOGFb/Yqtfh/v7w2btwUGu46Dk48pRKSioSiXjXNcDrD8Oat8LmCW3xc/DxHEhNh35jQqeRJEmSJEmqNnaek75yw5bASVTT2Ejfh0QiweSfHMd/HZvNz08+rOIXWvwcPHAqbPoUWh4NP30BDjmm8oIq1vZb8I0fABHk1uHmcXER5N4Yj3sOgybtwuaRJEmSJEmqRtyRroqykV6Kw1s25u5zu9E4o17FLvDKVHhsMBRtgcO+Cxf9C7LaVG5Ifan/WEipBx++AB88HzpNGK/9ET7/ABodDL2vCp1GkiRJkiSpWslpGjfSV3hGusrJRnpVKCmGf10Hz10DUQkcNxQG/xUyMkMnq92adYRv/yweTx8T/3eoS7auh5m3xeOTr/P7TZIkSZIk6WtymsQ3G121wUa6ysdGemXbtgX+OhTmTY4f9xsLp98DqRXc1a7yOelqyMiCtW/DokdCp0mu2b+GrV/AwZ3guPNDp5EkSZIkSap2cprE90FcaSNd5WQjvTJtWgsPngbvPRPf6PFHf4QTR8Y3w1RyNGwGJ10Tj2eMh22bw+ZJli+WwqtT4/HAWyE1LWweSZIkSZKkaih7x470vK1FbCrcHjiNahIb6ZXls8Vwfz9YtRAaNIWhf4cuZ4ZOVTd9+2fxTTY3roZ//0/oNMnx/E1QvA069oXD+4dOI0mSJEmSVC01zqhHZka8AdHjXVQeFWqkT548mQ4dOpCRkUH37t2ZM2dOmV738ssvk5aWxrHHHluRaauvpbPhDwNgw/L4nO5LXoD2PUOnqrvS0qH/TfH4pbtg46ch01S95fPgnacgkQKnjPc3ICRJkiRJkkqR3SS+4ajHu6g8yt1If/zxxxkxYgQ33HADr7/+OieeeCKDBg1i+fLlpb4uLy+PoUOH0q9fvwqHrZYWPQp/+SEU5EHb4+Hi56H5YaFT6egfQk4PKNoMMyeETlN1Skpg2vXxuNt50OrosHkkSZIkSZKquTZNdzTS19tIV9mVu5E+adIkLr74Yi655BI6d+7MXXfdRdu2bZkyZUqpr7v00ksZPHgwPXvuf6d2YWEh+fn5u31UO1EEM2+Dpy6DkqK4cTv0aWjUPHQyQbwre+Ct8Xjhn2Hte2HzVJW3n4SVC6BeI+g7OnQaSZIkSZKkam/njnSPdlF5lKuRvm3bNhYsWMDAgQN3e37gwIHMnTt3n6974IEH+PDDDxk7dmyZ5pk4cSJZWVm7Ptq2bVuemFVv+zZ46r9h5sT4ce+r4Mw/QL2MsLm0u/Y9odP3ISqB3DGh01S+ogJ4/uZ43PsqaNwqbB5JkiRJkqQaIMejXVQB5Wqkr1u3juLiYlq12r1h16pVK9asWbPX1yxZsoRRo0bx8MMPk5aWVqZ5rrvuOvLy8nZ9fPLJJ+WJWbW2roeHfghvPAqJVDj97vg87hTv21ot9b8ZUtJgyTT4aGboNJXrlSmQtxwaZ0PPYaHTSJIkSZIk1QjuSFdFVKj7m/jazQyjKNrjOYDi4mIGDx7MzTffzJFHHlnm66enp5OZmbnbR7Ww/mP4w0D4eA7Ubww/+St0vyB0KpWmxeHQ4+J4PP3G+Ezx2mDTZzD7N/G4/1io3zBsHkmSJEmSpBoixzPSVQHlaqS3aNGC1NTUPXafr127do9d6gAbN27ktdde4/LLLyctLY20tDTGjRvHG2+8QVpaGi+++OKBpU+mFQvg/v6w7n3IzIGL/gWH9w+dSmXR51pIz4Q1/4E3/xo6TeWYORG2bYRDjoWuZ4dOI0mSJEmSVGPsPNplTX4B24tryaZLVblyNdLr169P9+7dyc3N3e353NxcTjjhhD2+PjMzkzfffJNFixbt+rjssss46qijWLRoEccff/yBpU+Wd5+BB0+DzZ9B665wyfPQukvoVCqrRs3hxJHx+IVxUFTD321c+x4seCAenzLeY4UkSZIkSZLK4eCD0qmXmqAkipvpUlmU7dDyrxg5ciRDhgyhR48e9OzZk6lTp7J8+XIuu+wyID7ffOXKlfz5z38mJSWFLl12bzi3bNmSjIyMPZ6vlqII5k2BadcDERw+AM56ANIbh06m8jr+Mpj/B8j7BOZNhhN/ETpRxeXeGN9AtdP34dDeodNIkiRJkiTVKCkpCQ7JasDyL7awakMBbZp6ZK72r9yN9HPOOYfPP/+ccePGsXr1arp06cKzzz5L+/btAVi9ejXLly+v9KBJV1IM/7oOXr0vftzjIhj0K0gt95KpOqjXAPqNgSd/CnPuhG5D4aCDQ6cqvw9fhCXT4xuo9r85dBpJkiRJkqQaKadJ3EhfuWEL0Cx0HNUAFToT4uc//zkff/wxhYWFLFiwgJNOOmnX5x588EFmzpy5z9fedNNNLFq0qCLTJlciBbZtiscDboHTJtlEr+m6/AgOOSY+W3zWbaHTlF9JMUwbHY+/9dP4RqqSJEmSJEkqt+wd56Sv2uDRLiobD1fel0QCvn8XDH0ael0ZP1bNlpICA2+Nx689AOuWhM1TXosehrVvQ0YW9Pll6DSSJEmSJEk1Vk7TuJG+Yn0Nv5eeksZGemnS6kPHPqFTqDJ1OAmOHARRMeSODZ2m7Ao3wYs73gQ46ZfQ0F85kiRJkiRJqqicJhkArNpgI11lYyNddc+AmyGRCov/CR+/FDpN2bx8N2z6FJp2gG//NHQaSZIkSZKkGi2nSXyD0ZU20lVGNtJV9xx8FHQ/Px5PHw0lJWHz7E/eSpj723g84GZISw+bR5IkSZIkqYbL/sqO9CiKAqdRTWAjXXXTyddB/YNg1evw9pOh05TuxVtg+1Zo1xM6nxE6jSRJkiRJUo2382ajW7YVs2FLUeA0qglspKtuOqgl9B4Rj5+/GYqq6R2aVy2CNx6Nx6eM96a3kiRJkiRJlSCjXiotDqoPeLyLysZGuuqu7wyDxtmQtxxevS90mj1FUXz0DEDXsyCne9g8kiRJkiRJtUjOjl3pNtJVFjbSVXfVbwjf3dGonv0b2PJF2Dxft/hZ+HgOpGVAv7Gh00iSJEmSJNUqO493WWUjXWVgI1112zHnQquuUJgHs+4IneZLxUWQOyYef+fn0KRt2DySJEmSJEm1zK4d6ettpGv/bKSrbktJhYG3xOP5v4fPPwybZ6fX/giffwCNDobeV4VOI0mSJEmSVOvs2pGeZyNd+2cjXTqsLxw+AEq2w/M3hU4DW9fDzInxuO/1kJEZNo8kSZIkSVItlNPUHekqOxvpEsCAcZBIgXefhuXzwmaZ/eu4mX5wJ+g2NGwWSZIkSZKkWurLm40WBE6imsBGugTQ6hvQ7bx4PH00RFGYHF98BK/cF48HjofUtDA5JEmSJEmSarmdjfR1mwopKCoOnEbVnY10aae+N0C9hrBiPrzzVJgMz98EJUVw2HfhiP5hMkiSJEmSJNUBTRrWo0G9VABW57krXaWzkS7t1Lg19Boej5+/CbYXJnf+5fPgnb/HR8wMvDW5c0uSJEmSJNUxiUTCc9JVZjbSpa/qeTkc1ArWfwzz70/evCUlMO36eNxtCLQ6OnlzS5IkSZIk1VHZO453WbXBRrpKZyNd+qr0g+IjXgBm3RHf9DMZ3n4SVi6A+l+ZX5IkSZIkSVVq5znpK2ykaz9spEtf1+08aPkNKNgAs39d9fMVbY2PkgHoPQIat6r6OSVJkiRJkkROkwzAHenaPxvp0telpMKAW+Lxq1Phi6VVO9+8KZD3CWTmwHeGVe1ckiRJkiRJ2sUz0lVWNtKlvTm8H3Q8GYq3wQvjqm6eTZ/BnEnxuN8YqN+w6uaSJEmSJEnSbnKaxL2YVXk20lU6G+nS3iQSO3alJ+Lzy1e8VjXzzJwA2zbCIcdC17OrZg5JkiRJkiTtVfaOo11WbyigpCQKnEbVmY10aV8O+SYcOzgeTx8NUSX/Zbr2PVjwYDw+ZQKk+OMoSZIkSZKUTK0zM0hJwLbiEtZtKgwdR9WYnTupNH1vgLQGsPzf8N4zlXvt3BshKoFO34dDe1XutSVJkiRJkrRfaakptM6Md6Wv8IajKoWNdKk0WTlwwuXxOHcMbN9WOdf98EVYMh1S0mBAFZ7BLkmSJEmSpFJ5w1GVhY10aX96DYdGB8MXH8GCBw78eiXFMG10PP7WT6H5YQd+TUmSJEmSJFVIdpO4kb7KHekqhY10aX/SG8PJ18XjmbfB1g0Hdr3XH4K1b0NGE+jzywNNJ0mSJEmSpAOQs6ORvtJGukphI10qi+POhxZHwtYv4KU7K36dwk0wY3w87vNLaNiscvJJkiRJkiSpQtyRrrKwkS6VRWoaDLglHs+bAhuWV+w6L98Nmz6Fph3iY10kSZIkSZIU1M4z0ld4RrpKYSNdKqsjT4FDT4TiQnjhlvK/Pm8lzP1tPB4wDtLqV24+SZIkSZIklVuOO9JVBjbSpbJKJGDgjgb6m3+FlQvL9/oXb4HtW6HdCdD59MrPJ0mSJEmSpHLbebRLfsF2NhYUBU6j6spGulQe2d3gm+fE49wxEEVle92q1+GNR+PxKbfGTXlJkiRJkiQFd1B6GlkN6gGwakNB4DSqrmykS+X13RshNR0+ngPv/2v/Xx9FMG10PO56NuR0r9p8kiRJkiRJKpedx7us3LAlcBJVVzbSpfJq0ha+89/xePqNULyfX/lZ/CwsewnSMqDfmKrPJ0mSJEmSpHLJ3tVId0e69s5GulQRJ46EBs3g8yWw8E/7/rrt2+JmO0DPYXETXpIkSZIkSdVKm6Y7GunrveGo9s5GulQRGVlw8nXxeOZtUJC/96977Y/wxYfQ6GDofVXy8kmSJEmSJKnMsptkALBqg4107Z2NdKmielwIzQ6DzZ/By3fv+fmt62HWbfG47/WQ3ji5+SRJkiRJklQmOU0aArDSRrr2wUa6VFGp9WDAzfH43/dC3srdPz/713Ez/eDO0G1o8vNJkiRJkiSpTNyRrv2xkS4diE7fh3Y9YXsBvHjrl89/8RG8cl88HngrpKaFySdJkhTAli1baN++PVdffXXoKJIkSWWSs+OM9E/zCygqLgmcRtWRjXTpQCQScaMc4I1HYfV/4nHuWCgpgsP6wRH9w+WTJEkKYPz48Rx//PGhY0iSJJVZi0bp1E9NoSSCNXkFoeOoGrKRLh2oNj2gy5lABNNHw7J/w7tPQyLlyya7JElSHbFkyRLee+89Tj311NBRJEmSyiwlJbHreBfPSdfe2EiXKkO/MZBaH5bOgicuiJ/rNgRafSNoLEmSpK+aPXs2p59+OtnZ2SQSCZ566qk9vmby5Ml06NCBjIwMunfvzpw5c8o1x9VXX83EiRMrKbEkSVLyZDeJj3fxnHTtjQc3S5Wh6aHw7Z/FNx3dtAbqHwR9bwidSpIkaTebN2/mmGOO4cILL+TMM8/c4/OPP/44I0aMYPLkyfTq1Yv77ruPQYMG8c4779CuXTsAunfvTmFh4R6vnT59OvPnz+fII4/kyCOPZO7cuVX+55EkSapMOTsa6U+/sYpP8/esd1S1jmvXhOM7Ng8dY59spEuV5aSr4fWHoGAD9B4BjVuFTiRJkrSbQYMGMWjQoH1+ftKkSVx88cVccsklANx1111MmzaNKVOm7NplvmDBgn2+ft68eTz22GM88cQTbNq0iaKiIjIzMxkzZsw+X1NYWLhbYz4/P7+8fyxJkqRK0b55QwBmLv6MmYs/C5ym7hnW9zAb6VKd0KApnPsILHsZTrgydBpJkqRy2bZtGwsWLGDUqFG7PT9w4MAy7y6fOHHirob7gw8+yFtvvVVqE33na26++eaKhZYkSapE5367HV9sLmJjQVHoKHVSl+ys0BFKZSNdqkyH9oo/JEmSaph169ZRXFxMq1a7/1Zdq1atWLNmTZXNe9111zFy5Mhdj/Pz82nbtm2VzSdJkrQvLQ5KZ8zp3u9Oe2cjXZIkSdIuiURit8dRFO3xXFlccMEFZfq69PR00tPTy319SZIkKZlSQgeQJEmSFF6LFi1ITU3dY/f52rVr99ilLkmSJNU1NtIlSZIkUb9+fbp3705ubu5uz+fm5nLCCScESiVJkiRVDx7tIkmSJNURmzZt4oMPPtj1eOnSpSxatIhmzZrRrl07Ro4cyZAhQ+jRowc9e/Zk6tSpLF++nMsuuyxgakmSJCk8G+mSJElSHfHaa6/Rt2/fXY933uTz/PPP58EHH+Scc87h888/Z9y4caxevZouXbrw7LPP0r59+1CRJUmSpGohEUVRFDrE/uTn55OVlUVeXh6ZmZmh40iSJKkWs/YMy/WXJElSspSn9vSMdEmSJEmSJEmSSmEjXZIkSZIkSZKkUthIlyRJkiRJkiSpFDbSJUmSJEmSJEkqhY10SZIkSZIkSZJKYSNdkiRJkiRJkqRS2EiXJEmSJEmSJKkUNtIlSZIkSZIkSSqFjXRJkiRJkiRJkkphI12SJEmSJEmSpFKkhQ5QFlEUAZCfnx84iSRJkmq7nTXnzhpUyWXtL0mSpGQpT+1fIxrpGzduBKBt27aBk0iSJKmu2LhxI1lZWaFj1DnW/pIkSUq2stT+iagGbLUpKSlh1apVNG7cmEQiETpOjZCfn0/btm355JNPyMzMDB2nznDdw3Ddw3Ddw3Ddw3Ddwwi17lEUsXHjRrKzs0lJ8STEZLP2Lz//jgrDdQ/DdQ/DdQ/DdQ/DdU++kGtentq/RuxIT0lJoU2bNqFj1EiZmZn+0AfguofhuofhuofhuofhuocRYt3diR6OtX/F+XdUGK57GK57GK57GK57GK578oVa87LW/m6xkSRJkiRJkiSpFDbSJUmSJEmSJEkqhY30Wio9PZ2xY8eSnp4eOkqd4rqH4bqH4bqH4bqH4bqH4bpLZePPShiuexiuexiuexiuexiue/LVlDWvETcblSRJkiRJkiQpFHekS5IkSZIkSZJUChvpkiRJkiRJkiSVwka6JEmSJEmSJEmlsJEuSZIkSZIkSVIpbKRLkiRJkiRJklQKG+m1zMSJE/nWt75F48aNadmyJT/4wQ9YvHhx6Fh1ysSJE0kkEowYMSJ0lDph5cqVnHfeeTRv3pyGDRty7LHHsmDBgtCxarXt27czevRoOnToQIMGDejYsSPjxo2jpKQkdLRaZfbs2Zx++ulkZ2eTSCR46qmndvt8FEXcdNNNZGdn06BBA04++WTefvvtMGFrkdLWvaioiGuvvZauXbvSqFEjsrOzGTp0KKtWrQoXuJbY3/f7V1166aUkEgnuuuuupOWTqitr//Cs/ZPHuj/5rPuTw7o/DOv+MGp63W8jvZaZNWsWw4YNY968eeTm5rJ9+3YGDhzI5s2bQ0erE+bPn8/UqVP55je/GTpKnbB+/Xp69epFvXr1eO6553jnnXf4zW9+Q5MmTUJHq9Vuv/12fve733Hvvffy7rvvcscdd/CrX/2K3/72t6Gj1SqbN2/mmGOO4d57793r5++44w4mTZrEvffey/z582ndujUDBgxg48aNSU5au5S27lu2bGHhwoXceOONLFy4kCeffJL333+fM844I0DS2mV/3+87PfXUU7zyyitkZ2cnKZlUvVn7h2XtnzzW/WFY9yeHdX8Y1v1h1Pi6P1Kttnbt2giIZs2aFTpKrbdx48boiCOOiHJzc6M+ffpEw4cPDx2p1rv22muj3r17h45R55x22mnRRRddtNtzP/zhD6PzzjsvUKLaD4j+9re/7XpcUlIStW7dOrrtttt2PVdQUBBlZWVFv/vd7wIkrJ2+vu578+qrr0ZAtGzZsuSEqgP2te4rVqyIcnJyorfeeitq3759dOeddyY9m1TdWfsnj7V/cln3h2Hdn3zW/WFY94dRE+t+d6TXcnl5eQA0a9YscJLab9iwYZx22mn0798/dJQ64+mnn6ZHjx6cddZZtGzZkm7duvH73/8+dKxar3fv3rzwwgu8//77ALzxxhu89NJLnHrqqYGT1R1Lly5lzZo1DBw4cNdz6enp9OnTh7lz5wZMVvfk5eWRSCTcEVfFSkpKGDJkCNdccw1HH3106DhStWXtnzzW/sll3R+GdX941v3Vh3V/clT3uj8tdABVnSiKGDlyJL1796ZLly6h49Rqjz32GAsXLmT+/Pmho9QpH330EVOmTGHkyJFcf/31vPrqq1x55ZWkp6czdOjQ0PFqrWuvvZa8vDw6depEamoqxcXFjB8/nh//+Meho9UZa9asAaBVq1a7Pd+qVSuWLVsWIlKdVFBQwKhRoxg8eDCZmZmh49Rqt99+O2lpaVx55ZWho0jVlrV/8lj7J591fxjW/eFZ91cP1v3JU93rfhvptdjll1/Of/7zH1566aXQUWq1Tz75hOHDhzN9+nQyMjJCx6lTSkpK6NGjBxMmTACgW7duvP3220yZMsWCugo9/vjjPPTQQzzyyCMcffTRLFq0iBEjRpCdnc35558fOl6dkkgkdnscRdEez6lqFBUVce6551JSUsLkyZNDx6nVFixYwN13383ChQv9/pZKYe2fHNb+YVj3h2HdX31Y94dj3Z88NaHu92iXWuqKK67g6aefZsaMGbRp0yZ0nFptwYIFrF27lu7du5OWlkZaWhqzZs3innvuIS0tjeLi4tARa61DDjmEb3zjG7s917lzZ5YvXx4oUd1wzTXXMGrUKM4991y6du3KkCFDuOqqq5g4cWLoaHVG69atgS93qOy0du3aPXarqPIVFRVx9tlns3TpUnJzc92VUsXmzJnD2rVradeu3a5/Z5ctW8YvfvELDj300NDxpGrB2j95rP3DsO4Pw7o/POv+sKz7k6sm1P3uSK9loijiiiuu4G9/+xszZ86kQ4cOoSPVev369ePNN9/c7bkLL7yQTp06ce2115KamhooWe3Xq1cvFi9evNtz77//Pu3btw+UqG7YsmULKSm7vw+bmppKSUlJoER1T4cOHWjdujW5ubl069YNgG3btjFr1ixuv/32wOlqt53F9JIlS5gxYwbNmzcPHanWGzJkyB5nEJ9yyikMGTKECy+8MFAqqXqw9k8+a/8wrPvDsO4Pz7o/HOv+5KsJdb+N9Fpm2LBhPPLII/z973+ncePGu961zMrKokGDBoHT1U6NGzfe4xzKRo0a0bx5c8+nrGJXXXUVJ5xwAhMmTODss8/m1VdfZerUqUydOjV0tFrt9NNPZ/z48bRr146jjz6a119/nUmTJnHRRReFjlarbNq0iQ8++GDX46VLl7Jo0SKaNWtGu3btGDFiBBMmTOCII47giCOOYMKECTRs2JDBgwcHTF3zlbbu2dnZ/OhHP2LhwoU888wzFBcX7/p3tlmzZtSvXz9U7Bpvf9/vX/8fl3r16tG6dWuOOuqoZEeVqhVr/+Sz9g/Duj8M6/7ksO4Pw7o/jBpf90eqVYC9fjzwwAOho9Upffr0iYYPHx46Rp3wj3/8I+rSpUuUnp4ederUKZo6dWroSLVefn5+NHz48Khdu3ZRRkZG1LFjx+iGG26ICgsLQ0erVWbMmLHXv8/PP//8KIqiqKSkJBo7dmzUunXrKD09PTrppJOiN998M2zoWqC0dV+6dOk+/52dMWNG6Og12v6+37+uffv20Z133pnUjFJ1ZO1fPVj7J4d1f/JZ9yeHdX8Y1v1h1PS6PxFFUVSZjXlJkiRJkiRJkmoTbzYqSZIkSZIkSVIpbKRLkiRJkiRJklQKG+mSJEmSJEmSJJXCRrokSZIkSZIkSaWwkS5JkiRJkiRJUilspEuSJEmSJEmSVAob6ZIkSZIkSZIklcJGuiRJkiRJkiRJpbCRLkmSJEmSJElSKWykS5IkSZIkSZJUChvpkiRJkiRJkiSV4v8BX8L8VTyUGwgAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1500x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final Model Performance:\n",
      "\n",
      "Per-Class Metrics:\n",
      "\n",
      "Class 0:\n",
      "F1-Score: 0.5753\n",
      "Precision: 0.4618\n",
      "Recall: 0.7628\n",
      "\n",
      "Class 1:\n",
      "F1-Score: 0.3090\n",
      "Precision: 0.5414\n",
      "Recall: 0.2162\n",
      "\n",
      "Class 2:\n",
      "F1-Score: 0.7488\n",
      "Precision: 0.7690\n",
      "Recall: 0.7297\n",
      "\n",
      "Overall Metrics:\n",
      "Macro Avg F1: 0.5444\n",
      "Weighted Avg F1: 0.5444\n",
      "Accuracy: 0.5696\n"
     ]
    }
   ],
   "source": [
    "# Cell 6: Training Execution (Replaces previous training execution cell)\n",
    "# Initialize model and data with larger sample\n",
    "model, train_dataloader, test_dataloader, device, class_weights, tokenizer = prepare_model_and_data(\n",
    "    train_df=train_df,\n",
    "    test_df=test_df,\n",
    "    sample_size=5000  # Increased sample size\n",
    ")\n",
    "\n",
    "# Set class weights in model\n",
    "model.class_weights = class_weights\n",
    "\n",
    "# Train with enhanced monitoring\n",
    "history_df, final_metrics = train_model_enhanced(\n",
    "    model=model,\n",
    "    train_dataloader=train_dataloader,\n",
    "    val_dataloader=test_dataloader,\n",
    "    device=device,\n",
    "    num_epochs=15,\n",
    "    patience=5,\n",
    "    learning_rate=2e-4\n",
    ")\n",
    "\n",
    "# Plot training history\n",
    "plot_training_history(history_df)\n",
    "\n",
    "# Save the model\n",
    "save_model_and_config(model, tokenizer, save_path='dna_classifier_model')\n",
    "\n",
    "# Print final detailed metrics\n",
    "print(\"\\nFinal Model Performance:\")\n",
    "print(\"\\nPer-Class Metrics:\")\n",
    "for cls in ['0', '1', '2']:\n",
    "    print(f\"\\nClass {cls}:\")\n",
    "    print(f\"F1-Score: {final_metrics[cls]['f1-score']:.4f}\")\n",
    "    print(f\"Precision: {final_metrics[cls]['precision']:.4f}\")\n",
    "    print(f\"Recall: {final_metrics[cls]['recall']:.4f}\")\n",
    "\n",
    "print(\"\\nOverall Metrics:\")\n",
    "print(f\"Macro Avg F1: {final_metrics['macro avg']['f1-score']:.4f}\")\n",
    "print(f\"Weighted Avg F1: {final_metrics['weighted avg']['f1-score']:.4f}\")\n",
    "print(f\"Accuracy: {final_metrics['accuracy']:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1577774/2316938436.py:7: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  train_df_sample = train_df.groupby('kind', group_keys=False).apply(\n",
      "/tmp/ipykernel_1577774/2316938436.py:11: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  test_df_sample = test_df.groupby('kind', group_keys=False).apply(\n",
      "Some weights of BertModel were not initialized from the model checkpoint at zhihan1996/DNABERT-2-117M and are newly initialized: ['pooler.dense.bias', 'pooler.dense.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "DNABertMambaWithSequenceClassifier.__init__() got an unexpected keyword argument 'bert_model'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[25], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m model, train_dataloader, test_dataloader, device, class_weights \u001b[38;5;241m=\u001b[39m prepare_model_and_data(train_df, test_df)\n\u001b[1;32m      2\u001b[0m history_df \u001b[38;5;241m=\u001b[39m train_model(model, train_dataloader, test_dataloader, device)\n\u001b[1;32m      3\u001b[0m plot_training_history(history_df)\n",
      "Cell \u001b[0;32mIn[20], line 33\u001b[0m, in \u001b[0;36mprepare_model_and_data\u001b[0;34m(train_df, test_df, sample_size)\u001b[0m\n\u001b[1;32m     27\u001b[0m class_weights \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mtensor([\n\u001b[1;32m     28\u001b[0m     total_samples \u001b[38;5;241m/\u001b[39m (\u001b[38;5;28mlen\u001b[39m(class_counts) \u001b[38;5;241m*\u001b[39m count) \n\u001b[1;32m     29\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m count \u001b[38;5;129;01min\u001b[39;00m class_counts\n\u001b[1;32m     30\u001b[0m ], dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32)\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m     32\u001b[0m \u001b[38;5;66;03m# Initialize model\u001b[39;00m\n\u001b[0;32m---> 33\u001b[0m model \u001b[38;5;241m=\u001b[39m DNABertMambaWithSequenceClassifier(\n\u001b[1;32m     34\u001b[0m     bert_model\u001b[38;5;241m=\u001b[39mbert_model,\n\u001b[1;32m     35\u001b[0m     d_model\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m768\u001b[39m,\n\u001b[1;32m     36\u001b[0m     n_classes\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m3\u001b[39m\n\u001b[1;32m     37\u001b[0m )\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m     39\u001b[0m \u001b[38;5;66;03m# Create datasets\u001b[39;00m\n\u001b[1;32m     40\u001b[0m train_dataset \u001b[38;5;241m=\u001b[39m DNASequenceAndEmbeddingDataset(\n\u001b[1;32m     41\u001b[0m     sequences\u001b[38;5;241m=\u001b[39mtrain_df_sample[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msequence\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mtolist(),\n\u001b[1;32m     42\u001b[0m     labels\u001b[38;5;241m=\u001b[39mtrain_df_sample[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mkind\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mtolist(),\n\u001b[1;32m     43\u001b[0m     tokenizer\u001b[38;5;241m=\u001b[39mtokenizer,\n\u001b[1;32m     44\u001b[0m     device\u001b[38;5;241m=\u001b[39mdevice\n\u001b[1;32m     45\u001b[0m )\n",
      "\u001b[0;31mTypeError\u001b[0m: DNABertMambaWithSequenceClassifier.__init__() got an unexpected keyword argument 'bert_model'"
     ]
    }
   ],
   "source": [
    "model, train_dataloader, test_dataloader, device, class_weights = prepare_model_and_data(train_df, test_df)\n",
    "history_df = train_model(model, train_dataloader, test_dataloader, device)\n",
    "plot_training_history(history_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1577774/2316938436.py:7: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  train_df_sample = train_df.groupby('kind', group_keys=False).apply(\n",
      "/tmp/ipykernel_1577774/2316938436.py:11: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  test_df_sample = test_df.groupby('kind', group_keys=False).apply(\n",
      "Some weights of BertModel were not initialized from the model checkpoint at zhihan1996/DNABERT-2-117M and are newly initialized: ['pooler.dense.bias', 'pooler.dense.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0e6c03958621475aa5da25f6dcd3e450",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Epoch 1/10:   0%|          | 0/625 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "CompilationError",
     "evalue": "at 114:14:\n        else:\n            if EVEN_HEADDIM:\n                k = tl.load(k_ptrs + start_n * stride_kn,\n                            mask=(start_n + offs_n)[:, None] < seqlen_k,\n                            other=0.0)\n            else:\n                k = tl.load(k_ptrs + start_n * stride_kn,\n                            mask=((start_n + offs_n)[:, None] < seqlen_k) &\n                            (offs_d[None, :] < headdim),\n                            other=0.0)\n        qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n        qk += tl.dot(q, k, trans_b=True)\n              ^",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/triton/language/core.py:35\u001b[0m, in \u001b[0;36mbuiltin.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     33\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDid you forget to add @triton.jit ? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     34\u001b[0m                      \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m(`_builder` argument must be provided outside of JIT functions.)\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 35\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "\u001b[0;31mTypeError\u001b[0m: dot() got an unexpected keyword argument 'trans_b'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mCompilationError\u001b[0m                          Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[13], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m model, train_dataloader, test_dataloader, device, class_weights \u001b[38;5;241m=\u001b[39m prepare_model_and_data(train_df, test_df)\n\u001b[0;32m----> 2\u001b[0m history_df \u001b[38;5;241m=\u001b[39m train_model(model, train_dataloader, test_dataloader, device)\n\u001b[1;32m      3\u001b[0m plot_training_history(history_df)\n",
      "Cell \u001b[0;32mIn[10], line 27\u001b[0m, in \u001b[0;36mtrain_model\u001b[0;34m(model, train_dataloader, val_dataloader, device, num_epochs, patience, learning_rate)\u001b[0m\n\u001b[1;32m     23\u001b[0m labels \u001b[38;5;241m=\u001b[39m batch[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlabel\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m     25\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[0;32m---> 27\u001b[0m loss, logits \u001b[38;5;241m=\u001b[39m model(input_ids, attention_mask, sequence, labels)\n\u001b[1;32m     29\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n\u001b[1;32m     30\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mstep()\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "Cell \u001b[0;32mIn[7], line 45\u001b[0m, in \u001b[0;36mDNABertMambaWithSequenceClassifier.forward\u001b[0;34m(self, input_ids, attention_mask, sequence, labels)\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, input_ids, attention_mask, sequence, labels\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m     44\u001b[0m     \u001b[38;5;66;03m# Get BERT embeddings\u001b[39;00m\n\u001b[0;32m---> 45\u001b[0m     bert_outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbert_model(\n\u001b[1;32m     46\u001b[0m         input_ids\u001b[38;5;241m=\u001b[39minput_ids,\n\u001b[1;32m     47\u001b[0m         attention_mask\u001b[38;5;241m=\u001b[39mattention_mask\n\u001b[1;32m     48\u001b[0m     )\n\u001b[1;32m     49\u001b[0m     bert_embeddings \u001b[38;5;241m=\u001b[39m bert_outputs[\u001b[38;5;241m0\u001b[39m]  \u001b[38;5;66;03m# [batch_size, seq_len, d_model]\u001b[39;00m\n\u001b[1;32m     51\u001b[0m     \u001b[38;5;66;03m# Get nucleotide embeddings\u001b[39;00m\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/.cache/huggingface/modules/transformers_modules/zhihan1996/DNABERT-2-117M/d064dece8a8b41d9fb8729fbe3435278786931f1/bert_layers.py:609\u001b[0m, in \u001b[0;36mBertModel.forward\u001b[0;34m(self, input_ids, token_type_ids, attention_mask, position_ids, output_all_encoded_layers, masked_tokens_mask, **kwargs)\u001b[0m\n\u001b[1;32m    606\u001b[0m     first_col_mask[:, \u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    607\u001b[0m     subset_mask \u001b[38;5;241m=\u001b[39m masked_tokens_mask \u001b[38;5;241m|\u001b[39m first_col_mask\n\u001b[0;32m--> 609\u001b[0m encoder_outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mencoder(\n\u001b[1;32m    610\u001b[0m     embedding_output,\n\u001b[1;32m    611\u001b[0m     attention_mask,\n\u001b[1;32m    612\u001b[0m     output_all_encoded_layers\u001b[38;5;241m=\u001b[39moutput_all_encoded_layers,\n\u001b[1;32m    613\u001b[0m     subset_mask\u001b[38;5;241m=\u001b[39msubset_mask)\n\u001b[1;32m    615\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m masked_tokens_mask \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    616\u001b[0m     sequence_output \u001b[38;5;241m=\u001b[39m encoder_outputs[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/.cache/huggingface/modules/transformers_modules/zhihan1996/DNABERT-2-117M/d064dece8a8b41d9fb8729fbe3435278786931f1/bert_layers.py:447\u001b[0m, in \u001b[0;36mBertEncoder.forward\u001b[0;34m(self, hidden_states, attention_mask, output_all_encoded_layers, subset_mask)\u001b[0m\n\u001b[1;32m    445\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m subset_mask \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    446\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m layer_module \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlayer:\n\u001b[0;32m--> 447\u001b[0m         hidden_states \u001b[38;5;241m=\u001b[39m layer_module(hidden_states,\n\u001b[1;32m    448\u001b[0m                                      cu_seqlens,\n\u001b[1;32m    449\u001b[0m                                      seqlen,\n\u001b[1;32m    450\u001b[0m                                      \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    451\u001b[0m                                      indices,\n\u001b[1;32m    452\u001b[0m                                      attn_mask\u001b[38;5;241m=\u001b[39mattention_mask,\n\u001b[1;32m    453\u001b[0m                                      bias\u001b[38;5;241m=\u001b[39malibi_attn_mask)\n\u001b[1;32m    454\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m output_all_encoded_layers:\n\u001b[1;32m    455\u001b[0m             all_encoder_layers\u001b[38;5;241m.\u001b[39mappend(hidden_states)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/.cache/huggingface/modules/transformers_modules/zhihan1996/DNABERT-2-117M/d064dece8a8b41d9fb8729fbe3435278786931f1/bert_layers.py:328\u001b[0m, in \u001b[0;36mBertLayer.forward\u001b[0;34m(self, hidden_states, cu_seqlens, seqlen, subset_idx, indices, attn_mask, bias)\u001b[0m\n\u001b[1;32m    306\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\n\u001b[1;32m    307\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    308\u001b[0m     hidden_states: torch\u001b[38;5;241m.\u001b[39mTensor,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    314\u001b[0m     bias: Optional[torch\u001b[38;5;241m.\u001b[39mTensor] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    315\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m torch\u001b[38;5;241m.\u001b[39mTensor:\n\u001b[1;32m    316\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Forward pass for a BERT layer, including both attention and MLP.\u001b[39;00m\n\u001b[1;32m    317\u001b[0m \n\u001b[1;32m    318\u001b[0m \u001b[38;5;124;03m    Args:\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    326\u001b[0m \u001b[38;5;124;03m        bias: None or (batch, heads, max_seqlen_in_batch, max_seqlen_in_batch)\u001b[39;00m\n\u001b[1;32m    327\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 328\u001b[0m     attention_output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mattention(hidden_states, cu_seqlens, seqlen,\n\u001b[1;32m    329\u001b[0m                                       subset_idx, indices, attn_mask, bias)\n\u001b[1;32m    330\u001b[0m     layer_output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmlp(attention_output)\n\u001b[1;32m    331\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m layer_output\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/.cache/huggingface/modules/transformers_modules/zhihan1996/DNABERT-2-117M/d064dece8a8b41d9fb8729fbe3435278786931f1/bert_layers.py:241\u001b[0m, in \u001b[0;36mBertUnpadAttention.forward\u001b[0;34m(self, input_tensor, cu_seqlens, max_s, subset_idx, indices, attn_mask, bias)\u001b[0m\n\u001b[1;32m    219\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\n\u001b[1;32m    220\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    221\u001b[0m     input_tensor: torch\u001b[38;5;241m.\u001b[39mTensor,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    227\u001b[0m     bias: Optional[torch\u001b[38;5;241m.\u001b[39mTensor] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    228\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m torch\u001b[38;5;241m.\u001b[39mTensor:\n\u001b[1;32m    229\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Forward pass for scaled self-attention without padding.\u001b[39;00m\n\u001b[1;32m    230\u001b[0m \n\u001b[1;32m    231\u001b[0m \u001b[38;5;124;03m    Arguments:\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    239\u001b[0m \u001b[38;5;124;03m        bias: None or (batch, heads, max_seqlen_in_batch, max_seqlen_in_batch)\u001b[39;00m\n\u001b[1;32m    240\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 241\u001b[0m     self_output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mself(input_tensor, cu_seqlens, max_s, indices,\n\u001b[1;32m    242\u001b[0m                             attn_mask, bias)\n\u001b[1;32m    243\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m subset_idx \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    244\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moutput(index_first_axis(self_output, subset_idx),\n\u001b[1;32m    245\u001b[0m                            index_first_axis(input_tensor, subset_idx))\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/.cache/huggingface/modules/transformers_modules/zhihan1996/DNABERT-2-117M/d064dece8a8b41d9fb8729fbe3435278786931f1/bert_layers.py:182\u001b[0m, in \u001b[0;36mBertUnpadSelfAttention.forward\u001b[0;34m(self, hidden_states, cu_seqlens, max_seqlen_in_batch, indices, attn_mask, bias)\u001b[0m\n\u001b[1;32m    180\u001b[0m bias_dtype \u001b[38;5;241m=\u001b[39m bias\u001b[38;5;241m.\u001b[39mdtype\n\u001b[1;32m    181\u001b[0m bias \u001b[38;5;241m=\u001b[39m bias\u001b[38;5;241m.\u001b[39mto(torch\u001b[38;5;241m.\u001b[39mfloat16)\n\u001b[0;32m--> 182\u001b[0m attention \u001b[38;5;241m=\u001b[39m flash_attn_qkvpacked_func(qkv, bias)\n\u001b[1;32m    183\u001b[0m attention \u001b[38;5;241m=\u001b[39m attention\u001b[38;5;241m.\u001b[39mto(orig_dtype)\n\u001b[1;32m    184\u001b[0m bias \u001b[38;5;241m=\u001b[39m bias\u001b[38;5;241m.\u001b[39mto(bias_dtype)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/torch/autograd/function.py:574\u001b[0m, in \u001b[0;36mFunction.apply\u001b[0;34m(cls, *args, **kwargs)\u001b[0m\n\u001b[1;32m    571\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m torch\u001b[38;5;241m.\u001b[39m_C\u001b[38;5;241m.\u001b[39m_are_functorch_transforms_active():\n\u001b[1;32m    572\u001b[0m     \u001b[38;5;66;03m# See NOTE: [functorch vjp and autograd interaction]\u001b[39;00m\n\u001b[1;32m    573\u001b[0m     args \u001b[38;5;241m=\u001b[39m _functorch\u001b[38;5;241m.\u001b[39mutils\u001b[38;5;241m.\u001b[39munwrap_dead_wrappers(args)\n\u001b[0;32m--> 574\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m    576\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_setup_ctx_defined:\n\u001b[1;32m    577\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(\n\u001b[1;32m    578\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIn order to use an autograd.Function with functorch transforms \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    579\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m(vmap, grad, jvp, jacrev, ...), it must override the setup_context \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    580\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstaticmethod. For more details, please see \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    581\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhttps://pytorch.org/docs/main/notes/extending.func.html\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    582\u001b[0m     )\n",
      "File \u001b[0;32m~/.cache/huggingface/modules/transformers_modules/zhihan1996/DNABERT-2-117M/d064dece8a8b41d9fb8729fbe3435278786931f1/flash_attn_triton.py:1021\u001b[0m, in \u001b[0;36m_FlashAttnQKVPackedFunc.forward\u001b[0;34m(ctx, qkv, bias, causal, softmax_scale)\u001b[0m\n\u001b[1;32m   1019\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m qkv\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   1020\u001b[0m     qkv \u001b[38;5;241m=\u001b[39m qkv\u001b[38;5;241m.\u001b[39mcontiguous()\n\u001b[0;32m-> 1021\u001b[0m o, lse, ctx\u001b[38;5;241m.\u001b[39msoftmax_scale \u001b[38;5;241m=\u001b[39m _flash_attn_forward(\n\u001b[1;32m   1022\u001b[0m     qkv[:, :, \u001b[38;5;241m0\u001b[39m],\n\u001b[1;32m   1023\u001b[0m     qkv[:, :, \u001b[38;5;241m1\u001b[39m],\n\u001b[1;32m   1024\u001b[0m     qkv[:, :, \u001b[38;5;241m2\u001b[39m],\n\u001b[1;32m   1025\u001b[0m     bias\u001b[38;5;241m=\u001b[39mbias,\n\u001b[1;32m   1026\u001b[0m     causal\u001b[38;5;241m=\u001b[39mcausal,\n\u001b[1;32m   1027\u001b[0m     softmax_scale\u001b[38;5;241m=\u001b[39msoftmax_scale)\n\u001b[1;32m   1028\u001b[0m ctx\u001b[38;5;241m.\u001b[39msave_for_backward(qkv, o, lse, bias)\n\u001b[1;32m   1029\u001b[0m ctx\u001b[38;5;241m.\u001b[39mcausal \u001b[38;5;241m=\u001b[39m causal\n",
      "File \u001b[0;32m~/.cache/huggingface/modules/transformers_modules/zhihan1996/DNABERT-2-117M/d064dece8a8b41d9fb8729fbe3435278786931f1/flash_attn_triton.py:826\u001b[0m, in \u001b[0;36m_flash_attn_forward\u001b[0;34m(q, k, v, bias, causal, softmax_scale)\u001b[0m\n\u001b[1;32m    823\u001b[0m \u001b[38;5;66;03m# BLOCK = 128\u001b[39;00m\n\u001b[1;32m    824\u001b[0m \u001b[38;5;66;03m# num_warps = 4 if d <= 64 else 8\u001b[39;00m\n\u001b[1;32m    825\u001b[0m grid \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mlambda\u001b[39;00m META: (triton\u001b[38;5;241m.\u001b[39mcdiv(seqlen_q, META[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBLOCK_M\u001b[39m\u001b[38;5;124m'\u001b[39m]), batch \u001b[38;5;241m*\u001b[39m nheads)\n\u001b[0;32m--> 826\u001b[0m _fwd_kernel[grid](  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[1;32m    827\u001b[0m     q,\n\u001b[1;32m    828\u001b[0m     k,\n\u001b[1;32m    829\u001b[0m     v,\n\u001b[1;32m    830\u001b[0m     bias,\n\u001b[1;32m    831\u001b[0m     o,\n\u001b[1;32m    832\u001b[0m     lse,\n\u001b[1;32m    833\u001b[0m     tmp,\n\u001b[1;32m    834\u001b[0m     softmax_scale,\n\u001b[1;32m    835\u001b[0m     q\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m0\u001b[39m),\n\u001b[1;32m    836\u001b[0m     q\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m2\u001b[39m),\n\u001b[1;32m    837\u001b[0m     q\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m1\u001b[39m),\n\u001b[1;32m    838\u001b[0m     k\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m0\u001b[39m),\n\u001b[1;32m    839\u001b[0m     k\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m2\u001b[39m),\n\u001b[1;32m    840\u001b[0m     k\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m1\u001b[39m),\n\u001b[1;32m    841\u001b[0m     v\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m0\u001b[39m),\n\u001b[1;32m    842\u001b[0m     v\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m2\u001b[39m),\n\u001b[1;32m    843\u001b[0m     v\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m1\u001b[39m),\n\u001b[1;32m    844\u001b[0m     \u001b[38;5;241m*\u001b[39mbias_strides,\n\u001b[1;32m    845\u001b[0m     o\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m0\u001b[39m),\n\u001b[1;32m    846\u001b[0m     o\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m2\u001b[39m),\n\u001b[1;32m    847\u001b[0m     o\u001b[38;5;241m.\u001b[39mstride(\u001b[38;5;241m1\u001b[39m),\n\u001b[1;32m    848\u001b[0m     nheads,\n\u001b[1;32m    849\u001b[0m     seqlen_q,\n\u001b[1;32m    850\u001b[0m     seqlen_k,\n\u001b[1;32m    851\u001b[0m     seqlen_q_rounded,\n\u001b[1;32m    852\u001b[0m     d,\n\u001b[1;32m    853\u001b[0m     seqlen_q \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m \u001b[38;5;241m32\u001b[39m,\n\u001b[1;32m    854\u001b[0m     seqlen_k \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m \u001b[38;5;241m32\u001b[39m,  \u001b[38;5;66;03m# key for triton cache (limit number of compilations)\u001b[39;00m\n\u001b[1;32m    855\u001b[0m     \u001b[38;5;66;03m# Can't use kwargs here because triton autotune expects key to be args, not kwargs\u001b[39;00m\n\u001b[1;32m    856\u001b[0m     \u001b[38;5;66;03m# IS_CAUSAL=causal, BLOCK_HEADDIM=d,\u001b[39;00m\n\u001b[1;32m    857\u001b[0m     bias_type,\n\u001b[1;32m    858\u001b[0m     causal,\n\u001b[1;32m    859\u001b[0m     BLOCK_HEADDIM,\n\u001b[1;32m    860\u001b[0m     \u001b[38;5;66;03m# BLOCK_M=BLOCK, BLOCK_N=BLOCK,\u001b[39;00m\n\u001b[1;32m    861\u001b[0m     \u001b[38;5;66;03m# num_warps=num_warps,\u001b[39;00m\n\u001b[1;32m    862\u001b[0m     \u001b[38;5;66;03m# num_stages=1,\u001b[39;00m\n\u001b[1;32m    863\u001b[0m )\n\u001b[1;32m    864\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m o, lse, softmax_scale\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/triton/runtime/jit.py:345\u001b[0m, in \u001b[0;36mKernelInterface.__getitem__.<locals>.<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    339\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__getitem__\u001b[39m(\u001b[38;5;28mself\u001b[39m, grid) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m T:\n\u001b[1;32m    340\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    341\u001b[0m \u001b[38;5;124;03m    A JIT function is launched with: fn[grid](*args, **kwargs).\u001b[39;00m\n\u001b[1;32m    342\u001b[0m \u001b[38;5;124;03m    Hence JITFunction.__getitem__ returns a callable proxy that\u001b[39;00m\n\u001b[1;32m    343\u001b[0m \u001b[38;5;124;03m    memorizes the grid.\u001b[39;00m\n\u001b[1;32m    344\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 345\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mlambda\u001b[39;00m \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs: \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrun(grid\u001b[38;5;241m=\u001b[39mgrid, warmup\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/triton/runtime/autotuner.py:171\u001b[0m, in \u001b[0;36mAutotuner.run\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    169\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m config\u001b[38;5;241m.\u001b[39mpre_hook \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    170\u001b[0m     config\u001b[38;5;241m.\u001b[39mpre_hook({\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnargs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mconfig\u001b[38;5;241m.\u001b[39mall_kwargs()})\n\u001b[0;32m--> 171\u001b[0m ret \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfn\u001b[38;5;241m.\u001b[39mrun(\n\u001b[1;32m    172\u001b[0m     \u001b[38;5;241m*\u001b[39margs,\n\u001b[1;32m    173\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[1;32m    174\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mconfig\u001b[38;5;241m.\u001b[39mall_kwargs(),\n\u001b[1;32m    175\u001b[0m )\n\u001b[1;32m    176\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnargs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    177\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m ret\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/triton/runtime/autotuner.py:338\u001b[0m, in \u001b[0;36mHeuristics.run\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    336\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m v, heur \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m    337\u001b[0m     kwargs[v] \u001b[38;5;241m=\u001b[39m heur({\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mdict\u001b[39m(\u001b[38;5;28mzip\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39marg_names, args)), \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs})\n\u001b[0;32m--> 338\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfn\u001b[38;5;241m.\u001b[39mrun(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/triton/runtime/jit.py:662\u001b[0m, in \u001b[0;36mJITFunction.run\u001b[0;34m(self, grid, warmup, *args, **kwargs)\u001b[0m\n\u001b[1;32m    660\u001b[0m     \u001b[38;5;66;03m# compile the kernel\u001b[39;00m\n\u001b[1;32m    661\u001b[0m     src \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mASTSource(\u001b[38;5;28mself\u001b[39m, signature, constants, configs[\u001b[38;5;241m0\u001b[39m])\n\u001b[0;32m--> 662\u001b[0m     kernel \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcompile(\n\u001b[1;32m    663\u001b[0m         src,\n\u001b[1;32m    664\u001b[0m         target\u001b[38;5;241m=\u001b[39mtarget,\n\u001b[1;32m    665\u001b[0m         options\u001b[38;5;241m=\u001b[39moptions\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__dict__\u001b[39m,\n\u001b[1;32m    666\u001b[0m     )\n\u001b[1;32m    667\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcache[device][key] \u001b[38;5;241m=\u001b[39m kernel\n\u001b[1;32m    669\u001b[0m \u001b[38;5;66;03m# Check that used global values have not changed.\u001b[39;00m\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/triton/compiler/compiler.py:276\u001b[0m, in \u001b[0;36mcompile\u001b[0;34m(src, target, options)\u001b[0m\n\u001b[1;32m    274\u001b[0m codegen_fns \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mget_codegen_implementation()\n\u001b[1;32m    275\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 276\u001b[0m     module \u001b[38;5;241m=\u001b[39m src\u001b[38;5;241m.\u001b[39mmake_ir(options, codegen_fns, context)\n\u001b[1;32m    277\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    278\u001b[0m     filter_traceback(e)\n",
      "File \u001b[0;32m/nas/ucb/kishorechidambaram/anaconda3/lib/python3.12/site-packages/triton/compiler/compiler.py:113\u001b[0m, in \u001b[0;36mASTSource.make_ir\u001b[0;34m(self, options, codegen_fns, context)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmake_ir\u001b[39m(\u001b[38;5;28mself\u001b[39m, options, codegen_fns, context):\n\u001b[0;32m--> 113\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m ast_to_ttir(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfn, \u001b[38;5;28mself\u001b[39m, context\u001b[38;5;241m=\u001b[39mcontext, options\u001b[38;5;241m=\u001b[39moptions, codegen_fns\u001b[38;5;241m=\u001b[39mcodegen_fns)\n",
      "\u001b[0;31mCompilationError\u001b[0m: at 114:14:\n        else:\n            if EVEN_HEADDIM:\n                k = tl.load(k_ptrs + start_n * stride_kn,\n                            mask=(start_n + offs_n)[:, None] < seqlen_k,\n                            other=0.0)\n            else:\n                k = tl.load(k_ptrs + start_n * stride_kn,\n                            mask=((start_n + offs_n)[:, None] < seqlen_k) &\n                            (offs_d[None, :] < headdim),\n                            other=0.0)\n        qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n        qk += tl.dot(q, k, trans_b=True)\n              ^"
     ]
    }
   ],
   "source": [
    "model, train_dataloader, test_dataloader, device, class_weights = prepare_model_and_data(train_df, test_df)\n",
    "history_df = train_model(model, train_dataloader, test_dataloader, device)\n",
    "plot_training_history(history_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
